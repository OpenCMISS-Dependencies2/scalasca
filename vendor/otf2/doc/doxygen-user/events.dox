/**
 *  @addtogroup records OTF2 records
 *  @{
 *
 *  @defgroup records_event List of all event records
 *  @{
 *
 *  @anchor BufferFlush
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[BufferFlush]{%
 *  @endlatexonly
 *      BufferFlush
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  This event signals that the internal buffer was flushed at the given
 *  time.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor BufferFlush_stopTime
 *        stopTime @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The time the buffer flush finished. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_BufferFlush()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetBufferFlushCallback()
 *  @see OTF2_EvtReaderCallbacks_SetBufferFlushCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MeasurementOnOff
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MeasurementOnOff]{%
 *  @endlatexonly
 *      MeasurementOnOff
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  This event signals where the measurement system turned measurement on
 *  or off.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_MeasurementMode} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MeasurementOnOff_measurementMode
 *        measurementMode @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Is the measurement turned on (@eref{OTF2_MEASUREMENT_ON}) or off
 *      (@eref{OTF2_MEASUREMENT_OFF})? @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MeasurementOnOff()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMeasurementOnOffCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMeasurementOnOffCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor Enter
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[Enter]{%
 *  @endlatexonly
 *      Enter
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An enter record indicates that the program enters a code region.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RegionRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Enter_region
 *        region @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Needs to be defined in a definition record References a @eref{Region}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_REGION} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_Enter()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetEnterCallback()
 *  @see OTF2_EvtReaderCallbacks_SetEnterCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor Leave
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[Leave]{%
 *  @endlatexonly
 *      Leave
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A leave record indicates that the program leaves a code region.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RegionRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Leave_region
 *        region @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Needs to be defined in a definition record References a @eref{Region}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_REGION} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_Leave()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetLeaveCallback()
 *  @see OTF2_EvtReaderCallbacks_SetLeaveCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiSend
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiSend]{%
 *  @endlatexonly
 *      MpiSend
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiSend record indicates that a MPI message send process was
 *  initiated (MPI_SEND). It keeps the necessary information for this
 *  event: receiver of the message, communicator, and the message tag.
 *  You can optionally add further information like the message length
 *  (size of the send buffer).
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiSend_receiver
 *        receiver @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      MPI rank of receiver in @p communicator. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiSend_communicator
 *        communicator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Communicator ID. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiSend_msgTag
 *        msgTag @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message tag @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiSend_msgLength
 *        msgLength @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message length @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiSend()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiSendCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiSendCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiIsend
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiIsend]{%
 *  @endlatexonly
 *      MpiIsend
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiIsend record indicates that a MPI message send process was
 *  initiated (MPI_ISEND). It keeps the necessary information for this
 *  event: receiver of the message, communicator, and the message tag.
 *  You can optionally add further information like the message length
 *  (size of the send buffer).
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsend_receiver
 *        receiver @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      MPI rank of receiver in @p communicator. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsend_communicator
 *        communicator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Communicator ID. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsend_msgTag
 *        msgTag @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message tag @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsend_msgLength
 *        msgLength @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message length @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsend_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the related request @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiIsend()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiIsendCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiIsendCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiIsendComplete
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiIsendComplete]{%
 *  @endlatexonly
 *      MpiIsendComplete
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  Signals the completion of non-blocking send request.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIsendComplete_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the related request @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiIsendComplete()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiIsendCompleteCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiIsendCompleteCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiIrecvRequest
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiIrecvRequest]{%
 *  @endlatexonly
 *      MpiIrecvRequest
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  Signals the request of a receive, which can be completed later.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecvRequest_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the requested receive @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiIrecvRequest()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiIrecvRequestCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiIrecvRequestCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiRecv
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiRecv]{%
 *  @endlatexonly
 *      MpiRecv
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiRecv record indicates that a MPI message was received (MPI_RECV).
 *  It keeps the necessary information for this event: sender of the
 *  message, communicator, and the message tag. You can optionally add
 *  further information like the message length (size of the receive
 *  buffer).
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRecv_sender
 *        sender @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      MPI rank of sender in @p communicator. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRecv_communicator
 *        communicator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Communicator ID. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRecv_msgTag
 *        msgTag @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message tag @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRecv_msgLength
 *        msgLength @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message length @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiRecv()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiRecvCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiRecvCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiIrecv
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiIrecv]{%
 *  @endlatexonly
 *      MpiIrecv
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiIrecv record indicates that a MPI message was received
 *  (MPI_IRECV). It keeps the necessary information for this event:
 *  sender of the message, communicator, and the message tag. You can
 *  optionally add further information like the message length (size
 *  of the receive buffer).
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecv_sender
 *        sender @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      MPI rank of sender in @p communicator. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecv_communicator
 *        communicator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Communicator ID. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecv_msgTag
 *        msgTag @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message tag @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecv_msgLength
 *        msgLength @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Message length @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiIrecv_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the related request @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiIrecv()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiIrecvCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiIrecvCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiRequestTest
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiRequestTest]{%
 *  @endlatexonly
 *      MpiRequestTest
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  This events appears if the program tests if a request has already
 *  completed but the test failed.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRequestTest_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the related request @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiRequestTest()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiRequestTestCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiRequestTestCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiRequestCancelled
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiRequestCancelled]{%
 *  @endlatexonly
 *      MpiRequestCancelled
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  This events appears if the program canceled a request.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiRequestCancelled_requestID
 *        requestID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the related request @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiRequestCancelled()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiRequestCancelledCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiRequestCancelledCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiCollectiveBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiCollectiveBegin]{%
 *  @endlatexonly
 *      MpiCollectiveBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiCollectiveBegin record marks the begin of a MPI collective
 *  operation (MPI_GATHER, MPI_SCATTER etc.).
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiCollectiveBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiCollectiveBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiCollectiveBeginCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor MpiCollectiveEnd
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[MpiCollectiveEnd]{%
 *  @endlatexonly
 *      MpiCollectiveEnd
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A MpiCollectiveEnd record marks the end of a MPI collective operation
 *  (MPI_GATHER, MPI_SCATTER etc.). It keeps the necessary information
 *  for this event: type of collective operation, communicator, the
 *  root of this collective operation. You can optionally add further
 *  information like sent and received bytes.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CollectiveOp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiCollectiveEnd_collectiveOp
 *        collectiveOp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Determines which collective operation it is. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiCollectiveEnd_communicator
 *        communicator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Communicator References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiCollectiveEnd_root
 *        root @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      MPI rank of root in @p communicator or @eref{OTF2_UNDEFINED_UINT32} if
 *      the call has no root rank. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiCollectiveEnd_sizeSent
 *        sizeSent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Size of the sent message. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor MpiCollectiveEnd_sizeReceived
 *        sizeReceived @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Size of the received message. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_MpiCollectiveEnd()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMpiCollectiveEndCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMpiCollectiveEndCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpFork
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpFork]{%
 *  @endlatexonly
 *      OmpFork
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpFork record marks that an OpenMP Thread forks a thread team.
 *
 *  This event record is superseded by the @eref{ThreadFork} event record
 *  and should not be used when the @eref{ThreadFork} event record is
 *  in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpFork_numberOfRequestedThreads
 *        numberOfRequestedThreads @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Requested size of the team. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpFork()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpForkCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpForkCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpJoin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpJoin]{%
 *  @endlatexonly
 *      OmpJoin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpJoin record marks that a team of threads is joint and only the
 *  master thread continues execution.
 *
 *  This event record is superseded by the @eref{ThreadJoin} event record
 *  and should not be used when the @eref{ThreadJoin} event record is
 *  in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpJoin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpJoinCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpJoinCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpAcquireLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpAcquireLock]{%
 *  @endlatexonly
 *      OmpAcquireLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpAcquireLock record marks that a thread acquires an OpenMP lock.
 *
 *  This event record is superseded by the @eref{ThreadAcquireLock} event
 *  record and should not be used when the @eref{ThreadAcquireLock}
 *  event record is in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpAcquireLock_lockID
 *        lockID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpAcquireLock_acquisitionOrder
 *        acquisitionOrder @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A monotonically increasing number to determine the order of lock
 *      acquisitions (with unsynchronized clocks this is otherwise not
 *      possible). Corresponding acquire-release events have same
 *      number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpAcquireLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpAcquireLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpAcquireLockCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpReleaseLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpReleaseLock]{%
 *  @endlatexonly
 *      OmpReleaseLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpReleaseLock record marks that a thread releases an OpenMP lock.
 *
 *  This event record is superseded by the @eref{ThreadReleaseLock} event
 *  record and should not be used when the @eref{ThreadReleaseLock}
 *  event record is in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpReleaseLock_lockID
 *        lockID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpReleaseLock_acquisitionOrder
 *        acquisitionOrder @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A monotonically increasing number to determine the order of lock
 *      acquisitions (with unsynchronized clocks this is otherwise not
 *      possible). Corresponding acquire-release events have same
 *      number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpReleaseLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpReleaseLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpReleaseLockCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpTaskCreate
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpTaskCreate]{%
 *  @endlatexonly
 *      OmpTaskCreate
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpTaskCreate record marks that an OpenMP Task was/will be created
 *  in the current region.
 *
 *  This event record is superseded by the @eref{ThreadTaskCreate} event
 *  record and should not be used when the @eref{ThreadTaskCreate}
 *  event record is in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpTaskCreate_taskID
 *        taskID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier of the newly created task instance. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpTaskCreate()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpTaskCreateCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpTaskCreateCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpTaskSwitch
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpTaskSwitch]{%
 *  @endlatexonly
 *      OmpTaskSwitch
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpTaskSwitch record indicates that the execution of the current
 *  task will be suspended and another task starts/restarts its
 *  execution. Please note that this may change the current call stack
 *  of the executing location.
 *
 *  This event record is superseded by the @eref{ThreadTaskSwitch} event
 *  record and should not be used when the @eref{ThreadTaskSwitch}
 *  event record is in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpTaskSwitch_taskID
 *        taskID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier of the now active task instance. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpTaskSwitch()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpTaskSwitchCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpTaskSwitchCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor OmpTaskComplete
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[OmpTaskComplete]{%
 *  @endlatexonly
 *      OmpTaskComplete
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An OmpTaskComplete record indicates that the execution of an OpenMP
 *  task has finished.
 *
 *  This event record is superseded by the @eref{ThreadTaskComplete} event
 *  record and should not be used when the @eref{ThreadTaskComplete}
 *  event record is in use.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor OmpTaskComplete_taskID
 *        taskID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier of the completed task instance. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_OmpTaskComplete()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetOmpTaskCompleteCallback()
 *  @see OTF2_EvtReaderCallbacks_SetOmpTaskCompleteCallback()
 *
 *  @since Version 1.0
 *
 *  @deprecated In version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor Metric
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[Metric]{%
 *  @endlatexonly
 *      Metric
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A metric event is always stored at the location that recorded the
 *  metric. A metric event can reference a metric class or metric
 *  instance. Therefore, metric classes and instances share same ID
 *  space. Synchronous metrics are always located right before the
 *  according enter and leave event.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_MetricRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Metric_metric
 *        metric @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Could be a metric class or a metric instance. References a
 *      @eref{MetricClass}, or a @eref{MetricInstance} definition and
 *      will be mapped to the global definition if a mapping table of
 *      type @eref{OTF2_MAPPING_METRIC} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint8_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Metric_numberOfMetrics
 *        numberOfMetrics @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Number of metrics with in the set. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_Type} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Metric_typeIDs
 *        typeIDs @hblack{[} numberOfMetrics @hblack{]} @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      List of metric types. These types must match that of the corresponding
 *      @eref{MetricMember} definitions. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_MetricValue} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor Metric_metricValues
 *        metricValues @hblack{[} numberOfMetrics @hblack{]} @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      List of metric values. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_Metric()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetMetricCallback()
 *  @see OTF2_EvtReaderCallbacks_SetMetricCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ParameterString
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ParameterString]{%
 *  @endlatexonly
 *      ParameterString
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ParameterString record marks that in the current region, the
 *  specified string parameter has the specified value.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_ParameterRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterString_parameter
 *        parameter @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Parameter ID. References a @eref{Parameter} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_PARAMETER} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_StringRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterString_string
 *        string @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Value: Handle of a string definition References a @eref{String}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_STRING} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ParameterString()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetParameterStringCallback()
 *  @see OTF2_EvtReaderCallbacks_SetParameterStringCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ParameterInt
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ParameterInt]{%
 *  @endlatexonly
 *      ParameterInt
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ParameterInt record marks that in the current region, the specified
 *  integer parameter has the specified value.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_ParameterRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterInt_parameter
 *        parameter @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Parameter ID. References a @eref{Parameter} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_PARAMETER} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>int64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterInt_value
 *        value @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Value of the recorded parameter. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ParameterInt()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetParameterIntCallback()
 *  @see OTF2_EvtReaderCallbacks_SetParameterIntCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ParameterUnsignedInt
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ParameterUnsignedInt]{%
 *  @endlatexonly
 *      ParameterUnsignedInt
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ParameterUnsignedInt record marks that in the current region, the
 *  specified unsigned integer parameter has the specified value.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_ParameterRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterUnsignedInt_parameter
 *        parameter @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Parameter ID. References a @eref{Parameter} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_PARAMETER} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ParameterUnsignedInt_value
 *        value @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Value of the recorded parameter. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ParameterUnsignedInt()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetParameterUnsignedIntCallback()
 *  @see OTF2_EvtReaderCallbacks_SetParameterUnsignedIntCallback()
 *
 *  @since Version 1.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaWinCreate
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaWinCreate]{%
 *  @endlatexonly
 *      RmaWinCreate
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaWinCreate record denotes the creation of a RMA window.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaWinCreate_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window created. References a @eref{RmaWin} definition and
 *      will be mapped to the global definition if a mapping table of
 *      type @eref{OTF2_MAPPING_RMA_WIN} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaWinCreate()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaWinCreateCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaWinCreateCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaWinDestroy
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaWinDestroy]{%
 *  @endlatexonly
 *      RmaWinDestroy
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaWinDestroy record denotes the destruction of a RMA window.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaWinDestroy_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window destructed. References a @eref{RmaWin} definition and
 *      will be mapped to the global definition if a mapping table of
 *      type @eref{OTF2_MAPPING_RMA_WIN} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaWinDestroy()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaWinDestroyCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaWinDestroyCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaCollectiveBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaCollectiveBegin]{%
 *  @endlatexonly
 *      RmaCollectiveBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaCollectiveBegin record denotes the beginning of a collective RMA
 *  operation.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaCollectiveBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaCollectiveBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaCollectiveBeginCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaCollectiveEnd
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaCollectiveEnd]{%
 *  @endlatexonly
 *      RmaCollectiveEnd
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaCollectiveEnd record denotes the end of a collective RMA
 *  operation.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CollectiveOp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_collectiveOp
 *        collectiveOp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Determines which collective operation it is. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaSyncLevel} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_syncLevel
 *        syncLevel @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Synchronization level of this collective operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_root
 *        root @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Root process for this operation or @eref{OTF2_UNDEFINED_UINT32} if the
 *      call has no root rank. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_bytesSent
 *        bytesSent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes sent in operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaCollectiveEnd_bytesReceived
 *        bytesReceived @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes receives in operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaCollectiveEnd()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaCollectiveEndCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaCollectiveEndCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaGroupSync
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaGroupSync]{%
 *  @endlatexonly
 *      RmaGroupSync
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaGroupSync record denotes the synchronization with a subgroup of
 *  processes on a window.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaSyncLevel} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGroupSync_syncLevel
 *        syncLevel @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Synchronization level of this collective operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGroupSync_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_GroupRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGroupSync_group
 *        group @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Group of remote processes involved in synchronization. References a
 *      @eref{Group} definition and will be mapped to the global
 *      definition if a mapping table of type
 *      @eref{OTF2_MAPPING_GROUP} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaGroupSync()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaGroupSyncCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaGroupSyncCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaRequestLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaRequestLock]{%
 *  @endlatexonly
 *      RmaRequestLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaRequestLock record denotes the time a lock was requested and with
 *  it the earliest time it could have been granted.  It is used to
 *  mark (possibly) non-blocking lock request, as defined by the MPI
 *  standard.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaRequestLock_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaRequestLock_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the locked remote process or @eref{OTF2_UNDEFINED_UINT32} if
 *      all processes of the specified window are locked. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaRequestLock_lockId
 *        lockId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock acquired, if multiple locks are defined on a window. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaRequestLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of lock acquired. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaRequestLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaRequestLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaRequestLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaAcquireLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaAcquireLock]{%
 *  @endlatexonly
 *      RmaAcquireLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaAcquireLock record denotes the time a lock was acquired by the
 *  process.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAcquireLock_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAcquireLock_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the locked remote process or @eref{OTF2_UNDEFINED_UINT32} if
 *      all processes of the specified window are locked. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAcquireLock_lockId
 *        lockId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock acquired, if multiple locks are defined on a window. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAcquireLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of lock acquired. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaAcquireLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaAcquireLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaAcquireLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaTryLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaTryLock]{%
 *  @endlatexonly
 *      RmaTryLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaTryLock record denotes the time of an unsuccessful attempt to
 *  acquire the lock.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaTryLock_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaTryLock_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the locked remote process or @eref{OTF2_UNDEFINED_UINT32} if
 *      all processes of the specified window are locked. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaTryLock_lockId
 *        lockId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock acquired, if multiple locks are defined on a window. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaTryLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of lock acquired. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaTryLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaTryLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaTryLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaReleaseLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaReleaseLock]{%
 *  @endlatexonly
 *      RmaReleaseLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaReleaseLock record denotes the time the lock was released.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaReleaseLock_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaReleaseLock_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the locked remote process or @eref{OTF2_UNDEFINED_UINT32} if
 *      all processes of the specified window are locked. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaReleaseLock_lockId
 *        lockId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock released, if multiple locks are defined on a window. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaReleaseLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaReleaseLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaReleaseLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaSync
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaSync]{%
 *  @endlatexonly
 *      RmaSync
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaSync record denotes the direct synchronization with a possibly
 *  remote process.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaSync_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaSync_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the locked remote process. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaSyncType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaSync_syncType
 *        syncType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of synchronization. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaSync()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaSyncCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaSyncCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaWaitChange
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaWaitChange]{%
 *  @endlatexonly
 *      RmaWaitChange
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaWaitChange record denotes the change of a window that was waited
 *  for.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaWaitChange_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaWaitChange()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaWaitChangeCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaWaitChangeCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaPut
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaPut]{%
 *  @endlatexonly
 *      RmaPut
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaPut record denotes the time a put operation was issued.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaPut_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaPut_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the target process. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaPut_bytes
 *        bytes @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes sent to target. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaPut_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding completion record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaPut()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaPutCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaPutCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaGet
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaGet]{%
 *  @endlatexonly
 *      RmaGet
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaGet record denotes the time a get operation was issued.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGet_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGet_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the target process. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGet_bytes
 *        bytes @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes received from target. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaGet_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding completion record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaGet()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaGetCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaGetCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaAtomic
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaAtomic]{%
 *  @endlatexonly
 *      RmaAtomic
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaAtomic record denotes the time a atomic operation was issued.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_remote
 *        remote @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Rank of the target process. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaAtomicType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_type
 *        type @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of atomic operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_bytesSent
 *        bytesSent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes sent to target. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_bytesReceived
 *        bytesReceived @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Bytes received from target. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaAtomic_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding completion record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaAtomic()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaAtomicCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaAtomicCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaOpCompleteBlocking
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaOpCompleteBlocking]{%
 *  @endlatexonly
 *      RmaOpCompleteBlocking
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaOpCompleteBlocking record denotes the local completion of a
 *  blocking RMA operation.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteBlocking_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteBlocking_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding RMA operation record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaOpCompleteBlocking()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaOpCompleteBlockingCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaOpCompleteBlockingCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaOpCompleteNonBlocking
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaOpCompleteNonBlocking]{%
 *  @endlatexonly
 *      RmaOpCompleteNonBlocking
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaOpCompleteNonBlocking record denotes the local completion of a
 *  non-blocking RMA operation.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteNonBlocking_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteNonBlocking_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding RMA operation record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaOpCompleteNonBlocking()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaOpCompleteNonBlockingCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaOpCompleteNonBlockingCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaOpTest
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaOpTest]{%
 *  @endlatexonly
 *      RmaOpTest
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaOpTest record denotes that a non-blocking RMA operation has been
 *  tested for completion unsuccessfully.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpTest_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpTest_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding RMA operation record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaOpTest()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaOpTestCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaOpTestCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor RmaOpCompleteRemote
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[RmaOpCompleteRemote]{%
 *  @endlatexonly
 *      RmaOpCompleteRemote
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A RmaOpCompleteRemote record denotes the remote completion of a RMA
 *  operation.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_RmaWinRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteRemote_win
 *        win @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the window used for this operation. References a @eref{RmaWin}
 *      definition and will be mapped to the global definition if a
 *      mapping table of type @eref{OTF2_MAPPING_RMA_WIN} is
 *      available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor RmaOpCompleteRemote_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID used for matching the corresponding RMA operation record. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_RmaOpCompleteRemote()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetRmaOpCompleteRemoteCallback()
 *  @see OTF2_EvtReaderCallbacks_SetRmaOpCompleteRemoteCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadFork
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadFork]{%
 *  @endlatexonly
 *      ThreadFork
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadFork record marks that a thread forks a thread team.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_Paradigm} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadFork_model
 *        model @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The threading paradigm this event took place. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadFork_numberOfRequestedThreads
 *        numberOfRequestedThreads @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Requested size of the team. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadFork()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadForkCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadForkCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadJoin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadJoin]{%
 *  @endlatexonly
 *      ThreadJoin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadJoin record marks that a team of threads is joint and only the
 *  master thread continues execution.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_Paradigm} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadJoin_model
 *        model @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The threading paradigm this event took place. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadJoin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadJoinCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadJoinCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadTeamBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadTeamBegin]{%
 *  @endlatexonly
 *      ThreadTeamBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The current location enters the specified thread team.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTeamBegin_threadTeam
 *        threadTeam @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread team References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadTeamBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadTeamBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadTeamBeginCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadTeamEnd
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadTeamEnd]{%
 *  @endlatexonly
 *      ThreadTeamEnd
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The current location leaves the specified thread team.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTeamEnd_threadTeam
 *        threadTeam @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread team References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadTeamEnd()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadTeamEndCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadTeamEndCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadAcquireLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadAcquireLock]{%
 *  @endlatexonly
 *      ThreadAcquireLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadAcquireLock record marks that a thread acquires a lock.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_Paradigm} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadAcquireLock_model
 *        model @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The threading paradigm this event took place. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadAcquireLock_lockID
 *        lockID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadAcquireLock_acquisitionOrder
 *        acquisitionOrder @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A monotonically increasing number to determine the order of lock
 *      acquisitions (with unsynchronized clocks this is otherwise not
 *      possible). Corresponding acquire-release events have same
 *      number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadAcquireLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadAcquireLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadAcquireLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadReleaseLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadReleaseLock]{%
 *  @endlatexonly
 *      ThreadReleaseLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadReleaseLock record marks that a thread releases a lock.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_Paradigm} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadReleaseLock_model
 *        model @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The threading paradigm this event took place. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadReleaseLock_lockID
 *        lockID @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      ID of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadReleaseLock_acquisitionOrder
 *        acquisitionOrder @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A monotonically increasing number to determine the order of lock
 *      acquisitions (with unsynchronized clocks this is otherwise not
 *      possible). Corresponding acquire-release events have same
 *      number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadReleaseLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadReleaseLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadReleaseLockCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadTaskCreate
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadTaskCreate]{%
 *  @endlatexonly
 *      ThreadTaskCreate
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadTaskCreate record marks that a task in was/will be created and
 *  will be processed by the specified thread team.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskCreate_threadTeam
 *        threadTeam @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread team References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskCreate_creatingThread
 *        creatingThread @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Creating thread of this task. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskCreate_generationNumber
 *        generationNumber @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread-private generation number of task's creating thread. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadTaskCreate()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadTaskCreateCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadTaskCreateCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadTaskSwitch
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadTaskSwitch]{%
 *  @endlatexonly
 *      ThreadTaskSwitch
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadTaskSwitch record indicates that the execution of the current
 *  task will be suspended and another task starts/restarts its
 *  execution. Please note that this may change the current call stack
 *  of the executing location.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskSwitch_threadTeam
 *        threadTeam @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread team References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskSwitch_creatingThread
 *        creatingThread @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Creating thread of this task. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskSwitch_generationNumber
 *        generationNumber @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread-private generation number of task's creating thread. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadTaskSwitch()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadTaskSwitchCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadTaskSwitchCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadTaskComplete
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadTaskComplete]{%
 *  @endlatexonly
 *      ThreadTaskComplete
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  A ThreadTaskComplete record indicates that the execution of an OpenMP
 *  task has finished.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskComplete_threadTeam
 *        threadTeam @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread team References a @eref{Comm} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskComplete_creatingThread
 *        creatingThread @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Creating thread of this task. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadTaskComplete_generationNumber
 *        generationNumber @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Thread-private generation number of task's creating thread. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadTaskComplete()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadTaskCompleteCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadTaskCompleteCallback()
 *
 *  @since Version 1.2
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadCreate
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadCreate]{%
 *  @endlatexonly
 *      ThreadCreate
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The location created successfully a new thread.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadCreate_threadContingent
 *        threadContingent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The thread contingent. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadCreate_sequenceCount
 *        sequenceCount @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A @p threadContingent unique number. The corresponding
 *      @eref{ThreadBegin} event does have the same number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadCreate()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadCreateCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadCreateCallback()
 *
 *  @since Version 1.3
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadBegin]{%
 *  @endlatexonly
 *      ThreadBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  Marks the begin of a thread created by another thread.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadBegin_threadContingent
 *        threadContingent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The thread contingent. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadBegin_sequenceCount
 *        sequenceCount @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A @p threadContingent unique number. The corresponding
 *      @eref{ThreadCreate} event does have the same number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadBeginCallback()
 *
 *  @since Version 1.3
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadWait
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadWait]{%
 *  @endlatexonly
 *      ThreadWait
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The location waits for the completion of another thread.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadWait_threadContingent
 *        threadContingent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The thread contingent. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadWait_sequenceCount
 *        sequenceCount @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A @p threadContingent unique number. The corresponding
 *      @eref{ThreadEnd} event does have the same number. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadWait()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadWaitCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadWaitCallback()
 *
 *  @since Version 1.3
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ThreadEnd
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ThreadEnd]{%
 *  @endlatexonly
 *      ThreadEnd
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  Marks the end of a thread.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CommRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadEnd_threadContingent
 *        threadContingent @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The thread contingent. References a @eref{Comm} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_COMM} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ThreadEnd_sequenceCount
 *        sequenceCount @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A @p threadContingent unique number. The corresponding
 *      @eref{ThreadWait} event does have the same number.
 *      @eref{OTF2_UNDEFINED_UINT64} in case no corresponding
 *      @eref{ThreadWait} event exists. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ThreadEnd()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetThreadEndCallback()
 *  @see OTF2_EvtReaderCallbacks_SetThreadEndCallback()
 *
 *  @since Version 1.3
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor CallingContextEnter
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[CallingContextEnter]{%
 *  @endlatexonly
 *      CallingContextEnter
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The thread entered an instrumented region, represented by the
 *  referenced @eref{CallingContext}. In contrast to the @eref{Enter}
 *  event, it gives the full calling context through the
 *  @eref{CallingContext} tree.
 *
 *  Events based on the @eref{CallingContext} definition are mutually
 *  exclusive with the @eref{Enter}/@eref{Leave} events in a trace.
 *
 *  If no callback for this event is set but a callback for @eref{Enter}
 *  events is defined, the reader will automatically generate an
 *  @eref{Enter} callback call for the @eref{Region} referenced by the
 *  @eref{CallingContext} attribute of this event.  Note that this
 *  emulation does @b not re-create the full calling context!  It only
 *  re-creates the event order for instrumented regions.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CallingContextRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextEnter_callingContext
 *        callingContext @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The entered region as referenced by the @eref{CallingContext}
 *      definition. References a @eref{CallingContext} definition and
 *      will be mapped to the global definition if a mapping table of
 *      type @eref{OTF2_MAPPING_CALLING_CONTEXT} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextEnter_unwindDistance
 *        unwindDistance @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The unwindDistance for this @p callingContext. See the description in
 *      @eref{CallingContext}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_CallingContextEnter()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetCallingContextEnterCallback()
 *  @see OTF2_EvtReaderCallbacks_SetCallingContextEnterCallback()
 *
 *  @since Version 2.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor CallingContextLeave
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[CallingContextLeave]{%
 *  @endlatexonly
 *      CallingContextLeave
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The thread left an instrumented region, represented by the referenced
 *  @eref{CallingContext}. In contrast to the @eref{Leave} event, it
 *  gives the full calling context through the @eref{CallingContext}
 *  tree.
 *
 *  The unwind distance for this @eref{CallingContext} is defined to be 1.
 *  Because it must be assumed that the instrumented region made
 *  progress since the previous @eref{CallingContext} event.
 *
 *  Events based on the @eref{CallingContext} definition are mutually
 *  exclusive with the @eref{Enter}/@eref{Leave} events in a trace.
 *
 *  The parent of the @eref{CallingContext} must be used as the previous
 *  calling context for the next event.
 *
 *  If no callback for this event is set but a callback for @eref{Leave}
 *  events is defined, the reader will automatically generate an
 *  @eref{Leave} callback call for the @eref{Region} referenced by the
 *  @eref{CallingContext} attribute of this event.  Note that this
 *  emulation does @b not re-create the full calling context!  It only
 *  re-creates the event order for instrumented regions.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CallingContextRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextLeave_callingContext
 *        callingContext @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The left region as referenced by the @eref{CallingContext} definition.
 *      References a @eref{CallingContext} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_CALLING_CONTEXT} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_CallingContextLeave()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetCallingContextLeaveCallback()
 *  @see OTF2_EvtReaderCallbacks_SetCallingContextLeaveCallback()
 *
 *  @since Version 2.0
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor CallingContextSample
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[CallingContextSample]{%
 *  @endlatexonly
 *      CallingContextSample
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The thread was interrupted to take a sample of its current state
 *  (region and source code location).
 *
 *  Events based on the @eref{CallingContext} definition are mutually
 *  exclusive with the @eref{Enter}/@eref{Leave} events in a trace.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_CallingContextRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextSample_callingContext
 *        callingContext @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Describes the calling context of the thread when it was interrupted.
 *      References a @eref{CallingContext} definition and will be
 *      mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_CALLING_CONTEXT} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextSample_unwindDistance
 *        unwindDistance @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The unwindDistance for this @p callingContext. See the description in
 *      @eref{CallingContext}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_InterruptGeneratorRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor CallingContextSample_interruptGenerator
 *        interruptGenerator @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *       References a @eref{InterruptGenerator} definition and will be mapped
 *      to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_INTERRUPT_GENERATOR} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_CallingContextSample()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetCallingContextSampleCallback()
 *  @see OTF2_EvtReaderCallbacks_SetCallingContextSampleCallback()
 *
 *  @since Version 1.5
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoCreateHandle
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoCreateHandle]{%
 *  @endlatexonly
 *      IoCreateHandle
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoCreateHandle record marks the creation of a new @emph{active} I/O
 *  handle that can be used by subsequent I/O operation events.
 *
 *  An @eref{IoHandle} is @emph{active} between a pair of consecutive
 *  @eref{IoCreateHandle} and @eref{IoDestroyHandle} events. All
 *  @eref{Location}s of a @eref{LocationGroup} have access to an
 *  @emph{active} @eref{IoHandle}.
 *
 *  If the @eref{Comm} attribute of the @eref{IoHandle} handle is not
 *  @eref{OTF2_UNDEFINED_COMM}, this is a collective operation over
 *  @eref{Comm}.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoCreateHandle_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A previously @emph{inactive} I/O handle which will be activated by
 *      this record. References a @eref{IoHandle} definition and will
 *      be mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoAccessMode} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoCreateHandle_mode
 *        mode @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Determines which I/O operations can be applied to this I/O handle
 *      (e.g., read-only, write-only, read-write). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoCreationFlag} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoCreateHandle_creationFlags
 *        creationFlags @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Requested I/O handle creation flags (e.g., create, exclusive, etc.). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoStatusFlag} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoCreateHandle_statusFlags
 *        statusFlags @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      I/O handle status flags which will be associated with the @p handle
 *      attribute (e.g., append, create, close-on-exec, async, etc). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoCreateHandle()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoCreateHandleCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoCreateHandleCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoDestroyHandle
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoDestroyHandle]{%
 *  @endlatexonly
 *      IoDestroyHandle
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoDestroyHandle record marks the end of an @emph{active} I/O
 *  handle's lifetime.
 *
 *  An @eref{IoHandle} is @emph{active} between a pair of consecutive
 *  @eref{IoCreateHandle} and @eref{IoDestroyHandle} events. All
 *  @eref{Location}s of a @eref{LocationGroup} have access to an
 *  @emph{active} @eref{IoHandle}.
 *
 *  If the @eref{Comm} attribute of the @eref{IoHandle} handle is not
 *  @eref{OTF2_UNDEFINED_COMM}, this is a collective operation over
 *  @eref{Comm}.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDestroyHandle_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle which will be inactivated by this records.
 *      References a @eref{IoHandle} definition and will be mapped to
 *      the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoDestroyHandle()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoDestroyHandleCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoDestroyHandleCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoDuplicateHandle
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoDuplicateHandle]{%
 *  @endlatexonly
 *      IoDuplicateHandle
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoDuplicateHandle record marks the duplication of an already
 *  existing @emph{active} I/O handle.
 *
 *  The new I/O handle @p newHandle is @emph{active} after this event.
 *
 *  Both @eref{IoHandle}s must reference the same @eref{Comm} definition
 *  or be @eref{OTF2_UNDEFINED_COMM}.  If the @eref{Comm} attribute of
 *  the @eref{IoHandle} handles is not @eref{OTF2_UNDEFINED_COMM},
 *  this is a collective operation over @eref{Comm}.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDuplicateHandle_oldHandle
 *        oldHandle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDuplicateHandle_newHandle
 *        newHandle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      A previously @emph{inactive} I/O handle which will be activated by
 *      this record. References a @eref{IoHandle} definition and will
 *      be mapped to the global definition if a mapping table of type
 *      @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoStatusFlag} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDuplicateHandle_statusFlags
 *        statusFlags @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The status flag for the new I/O handle @p newHandle. No status flags
 *      will be inherited from the I/O handle @p oldHandle. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoDuplicateHandle()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoDuplicateHandleCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoDuplicateHandleCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoSeek
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoSeek]{%
 *  @endlatexonly
 *      IoSeek
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoSeek record marks a change of the position, e.g., within a file.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoSeek_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>int64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoSeek_offsetRequest
 *        offsetRequest @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Requested offset. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoSeekOption} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoSeek_whence
 *        whence @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Position inside the file from where @p offsetRequest should be applied
 *      (e.g., absolute from the start or end, relative to the current
 *      position). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoSeek_offsetResult
 *        offsetResult @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Resulting offset, e.g., within the file relative to the beginning of
 *      the file. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoSeek()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoSeekCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoSeekCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoChangeStatusFlags
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoChangeStatusFlags]{%
 *  @endlatexonly
 *      IoChangeStatusFlags
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoChangeStatusFlags record marks a change to the status flags
 *  associated with an @emph{active} I/O handle.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoChangeStatusFlags_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoStatusFlag} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoChangeStatusFlags_statusFlags
 *        statusFlags @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Set flags (e.g., close-on-exec, append, etc.). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoChangeStatusFlags()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoChangeStatusFlagsCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoChangeStatusFlagsCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoDeleteFile
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoDeleteFile]{%
 *  @endlatexonly
 *      IoDeleteFile
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoDeleteFile record marks the deletion of an I/O file.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoParadigmRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDeleteFile_ioParadigm
 *        ioParadigm @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The I/O paradigm which induced the deletion. References a
 *      @eref{IoParadigm} definition. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoFileRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoDeleteFile_file
 *        file @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      File identifier. References a @eref{IoRegularFile}, or a
 *      @eref{IoDirectory} definition and will be mapped to the global
 *      definition if a mapping table of type
 *      @eref{OTF2_MAPPING_IO_FILE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoDeleteFile()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoDeleteFileCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoDeleteFileCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoOperationBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoOperationBegin]{%
 *  @endlatexonly
 *      IoOperationBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoOperationBegin record marks the begin of a file operation (read,
 *  write, etc.).
 *
 *  See @ref otf2_io_operation_event_order for the possible event orders.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationBegin_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoOperationMode} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationBegin_mode
 *        mode @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Mode of an I/O handle operation (e.g., read or write). @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoOperationFlag} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationBegin_operationFlags
 *        operationFlags @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Special semantic of this operation. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationBegin_bytesRequest
 *        bytesRequest @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Requested bytes to write/read. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationBegin_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier used to correlate associated event records of an I/O
 *      operation. This identifier is unique for the referenced
 *      @eref{IoHandle}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoOperationBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoOperationBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoOperationBeginCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoOperationTest
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoOperationTest]{%
 *  @endlatexonly
 *      IoOperationTest
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoOperationTest record marks an unsuccessful test whether an I/O
 *  operation has already finished.
 *
 *  See @ref otf2_io_operation_event_order for the possible event orders.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationTest_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationTest_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier used to correlate associated event records of an I/O
 *      operation. This identifier is unique for the referenced
 *      @eref{IoHandle}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoOperationTest()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoOperationTestCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoOperationTestCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoOperationIssued
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoOperationIssued]{%
 *  @endlatexonly
 *      IoOperationIssued
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoOperationIssued record marks the successful initiation of a non-
 *  blocking operation (read, write etc.) on an @emph{active} I/O
 *  handle.
 *
 *  See @ref otf2_io_operation_event_order for the possible event orders.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationIssued_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationIssued_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier used to correlate associated event records of an I/O
 *      operation. This identifier is unique for the referenced
 *      @eref{IoHandle}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoOperationIssued()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoOperationIssuedCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoOperationIssuedCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoOperationComplete
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoOperationComplete]{%
 *  @endlatexonly
 *      IoOperationComplete
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoOperationComplete record marks the end of a file operation (read,
 *  write etc.) on an @emph{active} I/O handle.
 *
 *  See @ref otf2_io_operation_event_order for the possible event orders.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationComplete_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationComplete_bytesResult
 *        bytesResult @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Number of actual transferred bytes. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationComplete_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier used to correlate associated event records of an I/O
 *      operation. This identifier is unique for the referenced
 *      @eref{IoHandle}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoOperationComplete()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoOperationCompleteCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoOperationCompleteCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoOperationCancelled
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoOperationCancelled]{%
 *  @endlatexonly
 *      IoOperationCancelled
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoOperationCancelled record marks the successful cancellation of a
 *  non-blocking operation (read, write etc.) on an @emph{active} I/O
 *  handle.
 *
 *  See @ref otf2_io_operation_event_order for the possible event orders.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationCancelled_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoOperationCancelled_matchingId
 *        matchingId @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Identifier used to correlate associated event records of an I/O
 *      operation. This identifier is unique for the referenced
 *      @eref{IoHandle}. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoOperationCancelled()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoOperationCancelledCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoOperationCancelledCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoAcquireLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoAcquireLock]{%
 *  @endlatexonly
 *      IoAcquireLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoAcquireLock record marks the acquisition of an I/O lock.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoAcquireLock_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoAcquireLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoAcquireLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoAcquireLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoAcquireLockCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoReleaseLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoReleaseLock]{%
 *  @endlatexonly
 *      IoReleaseLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoReleaseLock record marks the release of an I/O lock.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoReleaseLock_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoReleaseLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoReleaseLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoReleaseLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoReleaseLockCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor IoTryLock
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[IoTryLock]{%
 *  @endlatexonly
 *      IoTryLock
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  An IoTryLock record marks when an I/O lock was requested but not
 *  granted.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_IoHandleRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoTryLock_handle
 *        handle @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      An @emph{active} I/O handle. References a @eref{IoHandle} definition
 *      and will be mapped to the global definition if a mapping table
 *      of type @eref{OTF2_MAPPING_IO_HANDLE} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LockType} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor IoTryLock_lockType
 *        lockType @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Type of the lock. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_IoTryLock()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetIoTryLockCallback()
 *  @see OTF2_EvtReaderCallbacks_SetIoTryLockCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ProgramBegin
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ProgramBegin]{%
 *  @endlatexonly
 *      ProgramBegin
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The ProgramBegin record marks the begin of the program.
 *
 *  This event is restricted to happen at most once on any @eref{Location}
 *  in a @eref{LocationGroup} that is of type
 *  @eref{OTF2_LOCATION_GROUP_TYPE_PROCESS}.
 *
 *  If there is a ProgramBegin record, a corresponding @eref{ProgramEnd}
 *  record on any @eref{Location} in the same @eref{LocationGroup} is
 *  mandatory and vice versa.
 *
 *  None of the timestamps recorded within the same @eref{LocationGroup}
 *  must be smaller than ProgramBegin's timestamp.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_StringRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ProgramBegin_programName
 *        programName @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The name of the program. References a @eref{String} definition and
 *      will be mapped to the global definition if a mapping table of
 *      type @eref{OTF2_MAPPING_STRING} is available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>uint32_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ProgramBegin_numberOfArguments
 *        numberOfArguments @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      Number of additional arguments to the program. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_StringRef} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ProgramBegin_programArguments
 *        programArguments @hblack{[} numberOfArguments @hblack{]} @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      List of additional arguments to the program. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ProgramBegin()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetProgramBeginCallback()
 *  @see OTF2_EvtReaderCallbacks_SetProgramBeginCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *  @anchor ProgramEnd
 *  @htmlonly
 *  <div class="memitem">
 *  <div class="memproto">
 *    <table class="memname"><tbody>
 *      <tr><td class="memname">
 *  @endhtmlonly
 *  @latexonly
 *  \section[ProgramEnd]{%
 *  @endlatexonly
 *      ProgramEnd
 *  @latexonly
 *  }
 *  @endlatexonly
 *  @htmlonly
 *      </td></tr>
 *    </tbody></table>
 *  </div>
 *  <div class="memdoc">
 *  @endhtmlonly
 *  The ProgramEnd record marks the end of the program.
 *
 *  This event is restricted to happen at most once on any @eref{Location}
 *  in a @eref{LocationGroup} that is of type
 *  @eref{OTF2_LOCATION_GROUP_TYPE_PROCESS}.
 *
 *  If there is a ProgramEnd record, a corresponding @eref{ProgramBegin}
 *  record on any @eref{Location} in the same @eref{LocationGroup} is
 *  mandatory, and vice versa.
 *
 *  None of the timestamps recorded within the same @eref{LocationGroup}
 *  must be larger than ProgramEnd's timestamp.
 *
 * @ifnot LATEX
 *  @par Attributes
 * @endif
 *  @htmlonly
 *  <table class="params"><tbody>
 *  @endhtmlonly
 *  @latexonly
 *  \begin{DoxyParams}[1]{Attributes}%
 *  @endlatexonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_LocationRef}@ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        location @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The location where this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        @eref{OTF2_TimeStamp} @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        timestamp @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *        The time when this event happened. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *    <tr>
 *      <td class="paramtype">
 *  @endhtmlonly
 *        <em>int64_t</em> @ltab
 *  @htmlonly
 *      </td>
 *      <td class="paramname">
 *  @endhtmlonly
 *        @anchor ProgramEnd_exitStatus
 *        exitStatus @ltab
 *  @htmlonly
 *      </td>
 *      <td>
 *  @endhtmlonly
 *      The exit status of the program.
 *
 *      Note, that on some systems only the least significant 8 bits may be
 *      visible to other processes.
 *
 *      Use @eref{OTF2_UNDEFINED_INT64}, if the exit status was not available. @lrowend
 *  @htmlonly
 *      </td>
 *    </tr>
 *  @endhtmlonly
 *  @htmlonly
 *  </tbody></table>
 *  @endhtmlonly
 *  @latexonly
 *  \end{DoxyParams}%
 *  @endlatexonly
 *
 *  @see OTF2_EvtWriter_ProgramEnd()
 *  @see OTF2_GlobalEvtReaderCallbacks_SetProgramEndCallback()
 *  @see OTF2_EvtReaderCallbacks_SetProgramEndCallback()
 *
 *  @since Version 2.1
 *
 *  @htmlonly
 *  </div>
 *  </div>
 *  @endhtmlonly
 *
 *
 *  @}
 *
 *  @}
 */
