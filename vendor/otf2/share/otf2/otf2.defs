GlobalOnlyDefRecord(
    """\
    Defines the timer resolution and time range of this trace. There will be no
    event with a timestamp less than @p globalOffset, and no event with
    timestamp greater than (@p globalOffset + @p traceLength).
    """,
    5,
    'ClockProperties',
    Attribute(
        """Ticks per seconds.""",
        uint64_t,
        'timerResolution'
    ),
    Attribute(
        """A timestamp smaller than all event timestamps.""",
        uint64_t,
        'globalOffset'
    ),
    Attribute(
        """\
        A timespan which includes the timespan between the smallest and
        greatest timestamp of all event timestamps.
        """,
        uint64_t,
        'traceLength'
    ))

LocalOnlyDefRecord(
    """\
    Mapping tables are needed for situations where an ID is not globally known
    at measurement time. They are applied automatically at reading.
    """,
    5,
    'MappingTable',
    MappingTypeAttribute(
        """Says to what type of ID the mapping table has to be applied."""
    ),
    Attribute(
        """Mapping table.""",
        OTF2_IdMap,
        'idMap'
    ),
    archive_location_callback='set_mapping_table')

LocalOnlyDefRecord(
    """Clock offsets are used for clock corrections.""",
    6,
    'ClockOffset',
    Attribute(
        """Time when this offset was determined.""",
        OTF2_TimeStamp,
        'time'
    ),
    Attribute(
        """The offset to the global clock which was determined at @p time.""",
        int64_t,
        'offset'
    ),
    Attribute(
        """\
        A possible standard deviation, which can be used as a metric for the
        quality of the offset.
        """,
        double,
        'standardDeviation'
    ),
    archive_location_callback='add_clock_offset')

DefRecord(
    """The string definition.""",
    10,
    'String',
    uint32_t,
    Attribute(
        """The string, null terminated.""",
        string_t,
        'string'
    ),
    mapping_type=OTF2_MAPPING_STRING)

DefRecord(
    """The attribute definition.""",
    11,
    'Attribute',
    uint32_t,
    StringAttribute(
        """Name of the attribute.""",
        'name'
    ),
    StringAttribute(
        """Description of the attribute.""",
        'description',
        since=Version(1,4)
    ),
    TypeAttribute(
        """Type of the attribute value.""",
        'type'
    ),
    mapping_type=OTF2_MAPPING_ATTRIBUTE)

DefRecord(
    """The system tree node definition.""",
    12,
    'SystemTreeNode',
    uint32_t,
    StringAttribute(
        """Free form instance name of this node.""",
        'name'
    ),
    StringAttribute(
        """Free form class name of this node""",
        'className'
    ),
    SelfRefAttribute(
        """\
        Parent id of this node. May be @eref{OTF2_UNDEFINED_SYSTEM_TREE_NODE}
        to indicate that there is no parent.
        """
    ))

DefRecord(
    """The location group definition.""",
    13,
    'LocationGroup',
    uint32_t,
    StringAttribute(
        """Name of the group.""",
        'name'
    ),
    LocationGroupTypeAttribute(
        """Type of this group."""
    ),
    SystemTreeNodeAttribute(
        """Parent of this location group in the system tree.""",
        'systemTreeParent'
    ))

DefRecord(
    """The location definition.""",
    14,
    'Location',
    uint64_t,
    StringAttribute(
        """Name of the location""",
        'name'
    ),
    LocationTypeAttribute(
        """Location type."""
    ),
    Attribute(
        """Number of events this location has recorded.""",
        uint64_t,
        'numberOfEvents'
    ),
    LocationGroupAttribute(
        """Location group which includes this location."""
    ),
    mapping_type=OTF2_MAPPING_LOCATION)

DefRecord(
    """The region definition.""",
    15,
    'Region',
    uint32_t,
    StringAttribute(
        """Name of the region (demangled name if available).""",
        'name'
    ),
    StringAttribute(
        """Alternative name of the region (e.g. mangled name).""",
        'canonicalName',
        since=Version(1,1)
    ),
    StringAttribute(
        """A more detailed description of this region.""",
        'description'
    ),
    RegionTypeAttribute(
        """Region type.""",
        attic=Version(1,1)
    ),
    RegionRoleAttribute(
        """Region role.""",
        since=Version(1,1)
    ),
    ParadigmAttribute(
        """Paradigm.""",
        since=Version(1,1)
    ),
    RegionFlagAttribute(
        """Region flags.""",
        'regionFlags',
        since=Version(1,1)
    ),
    StringAttribute(
        """The source file where this region was declared.""",
        'sourceFile'
    ),
    Attribute(
        """Starting line number of this region in the source file.""",
        uint32_t,
        'beginLineNumber'
    ),
    Attribute(
        """Ending line number of this region in the source file.""",
        uint32_t,
        'endLineNumber'
    ),
    mapping_type=OTF2_MAPPING_REGION)

DefRecord(
    """The callsite definition.""",
    16,
    'Callsite',
    uint32_t,
    StringAttribute(
        """The source file where this call was made.""",
        'sourceFile'
    ),
    Attribute(
        """Line number in the source file where this call was made.""",
        uint32_t,
        'lineNumber'
    ),
    RegionAttribute(
        """The region which was called.""",
        'enteredRegion'
    ),
    RegionAttribute(
        """The region which made the call.""",
        'leftRegion'
    ),
    deprecated=Version(2,0))

DefRecord(
    """The callpath definition.""",
    17,
    'Callpath',
    uint32_t,
    SelfRefAttribute(
        """The parent of this callpath."""
    ),
    RegionAttribute(
        """The region of this callpath."""
    ))

DefRecord(
    """The group definition.""",
    18,
    'Group',
    uint32_t,
    StringAttribute(
        """Name of this group""",
        'name'
    ),
    GroupTypePre12Attribute(
        """The type of this group.""",
        attic=Version(1,2)
    ),
    GroupTypeAttribute(
        """The type of this group.""",
        since=Version(1,2)
    ),
    ParadigmAttribute(
        """The paradigm of this communication group.""",
        since=Version(1,2)
    ),
    GroupFlagAttribute(
        """Flags for this group.""",
        'groupFlags',
        since=Version(1,2)
    ),
    ArrayAttribute(
        """The number of members in this group.""",
        uint32_t,
        'numberOfMembers',
        Attribute(
            """The identifiers of the group members.""",
            uint64_t,
            'members'
        )),
    mapping_type=OTF2_MAPPING_GROUP)

DefRecord(
    """\
    A metric is defined by a metric member definition. A metric member is
    always a member of a metric class. Therefore, a single metric is a special
    case of a metric class with only one member. It is not allowed to reference
    a metric member id in a metric event, but only metric class IDs.
    """,
    19,
    'MetricMember',
    uint32_t,
    StringAttribute(
        """Name of the metric.""",
        'name'
    ),
    StringAttribute(
        """Description of the metric.""",
        'description'
    ),
    MetricTypeAttribute(
        """Metric type: PAPI, etc."""
    ),
    MetricModeAttribute(
        """Metric mode: accumulative, fix, relative, etc."""
    ),
    TypeAttribute(
        """\
        Type of the value. Only @eref{OTF2_TYPE_INT64}, @eref{OTF2_TYPE_UINT64},
        and @eref{OTF2_TYPE_DOUBLE} are valid types. If this metric member is
        recorded in a @eref{Metric} event, than this type and the type in the
        event must match.
        """,
        'valueType'
    ),
    BaseAttribute(
        """\
        The recorded values should be handled in this given base, either
        binary or decimal. This information can be used if the value needs
        to be scaled.
        """
    ),
    Attribute(
        """\
        The values inside the Metric events should be scaled by the factor
        base^exponent, to get the value in its base unit. For example, if the
        metric values come in as KiBi, than the base should be
        @eref{OTF2_BASE_BINARY} and the exponent 10. Than the writer does not
        need to scale the values up to bytes, but can directly write the KiBi
        values into the Metric event. At reading time, the reader can apply the
        scaling factor to get the value in its base unit, ie. in bytes.
        """,
        int64_t,
        'exponent'
    ),
    StringAttribute(
        """\
        Unit of the metric. This needs to be the scale free base unit, ie.
        "bytes", "operations", or "seconds". In particular this unit should
        not have any scale prefix.
        """,
        'unit'
    ))

DefRecord(
    """\
    For a metric class it is implicitly given that the event stream that
    records the metric is also the scope. A metric class can contain multiple
    different metrics.
    """,
    20,
    'MetricClass',
    uint32_t,
    ArrayAttribute(
        """Number of metrics within the set.""",
        uint8_t,
        'numberOfMetrics',
        MetricMemberAttribute(
            """List of metric members."""
        )),
    MetricOccurrenceAttribute(
        """Defines occurrence of a metric set."""
    ),
    RecorderKindAttribute(
        """\
        What kind of locations will record this metric class, or will this
        metric class only be recorded by metric instances.
        """,
        since=Version(1,2)
    ),
    mapping_type=OTF2_MAPPING_METRIC,
    ref_name='Metric')

DefRecord(
    """\
    A metric instance is used to define metrics that are recorded at one
    location for multiple locations or for another location. The occurrence
    of a metric instance is implicitly of type @eref{OTF2_METRIC_ASYNCHRONOUS}.
    """,
    21,
    'MetricInstance',
    MetricClassRecord,
    MetricAttribute(
        """\
        The instanced @eref{MetricClass}. This metric class must be of kind
        @eref{OTF2_RECORDER_KIND_ABSTRACT}.
        """,
        'metricClass'
    ),
    LocationAttribute(
        """Recorder of the metric: location ID.""",
        'recorder'
    ),
    MetricScopeAttribute(
        """\
        Defines type of scope: location, location group, system tree node,
        or a generic group of locations.
        """
    ),
    Attribute(
        """\
        Scope of metric: ID of a location, location group, system tree node,
        or a generic group of locations.
        """,
        uint64_t,
        'scope'
    ))

DefRecord(
    """The communicator definition.""",
    22,
    'Comm',
    uint32_t,
    StringAttribute(
        """\
        The name given by calling MPI_Comm_set_name on this communicator.
        Or the empty name to indicate that no name was given.
        """,
        'name'
    ),
    GroupAttribute(
        """\
        The describing MPI group of this MPI communicator

        The group needs to be of type @eref{OTF2_GROUP_TYPE_COMM_GROUP} or
        @eref{OTF2_GROUP_TYPE_COMM_SELF}.
        """
    ),
    SelfRefAttribute(
        """\
        The parent MPI communicator from which this communicator was created,
        if any. Use @eref{OTF2_UNDEFINED_COMM} to indicate no parent.
        """
    ),
    mapping_type=OTF2_MAPPING_COMM)

DefRecord(
    """The parameter definition.""",
    23,
    'Parameter',
    uint32_t,
    StringAttribute(
        """Name of the parameter (variable name etc.)""",
        'name'
    ),
    ParameterTypeAttribute(
        """\
        Type of the parameter, @eref{OTF2_ParameterType} for possible types.
        """
    ),
    mapping_type=OTF2_MAPPING_PARAMETER)

DefRecord(
    """\
    A window defines the communication context for any remote-memory access operation.
    """,
    24,
    'RmaWin',
    uint32_t,
    StringAttribute(
        """Name, e.g. 'GASPI Queue 1', 'NVidia Card 2', etc..""",
        'name',
    ),
    CommAttribute(
        """Communicator object used to create the window.""",
        'comm',
    ),
    since=Version(1,2),
    mapping_type=OTF2_MAPPING_RMA_WIN)

SuppDefRecord(
    """The metric class recorder definition.""",
    25,
    'MetricClassRecorder',
    MetricClassRecord,
    LocationAttribute(
        """The location which recorded the referenced metric class.""",
        'recorder'
    ),
    since=Version(1,2))

SuppDefRecord(
    """An arbitrary key/value property for a @eref{SystemTreeNode} definition.""",
    26,
    'SystemTreeNodeProperty',
    SystemTreeNodeRecord,
    StringAttribute(
        """Name of the property.""",
        'name'
    ),
    StringAttribute(
        """Property value.""",
        'stringValue',
        attic=Version(2,0)
    ),
    TypeAttribute(
        """\
        The type of this property.
        """,
        since=Version(2,0)
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value',
        since=Version(2,0)
    ),
    since=Version(1,2))

SuppDefRecord(
    """The system tree node domain definition.""",
    27,
    'SystemTreeNodeDomain',
    SystemTreeNodeRecord,
    SystemTreeDomainAttribute(
        """The domain in which the referenced @eref{SystemTreeNode} operates in."""
    ),
    since=Version(1,2))

SuppDefRecord(
    """An arbitrary key/value property for a @eref{LocationGroup} definition.""",
    28,
    'LocationGroupProperty',
    LocationGroupRecord,
    StringAttribute(
        """Name of the property.""",
        'name'
    ),
    StringAttribute(
        """Property value.""",
        'stringValue',
        attic=Version(2,0)
    ),
    TypeAttribute(
        """\
        The type of this property.
        """,
        since=Version(2,0)
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value',
        since=Version(2,0)
    ),
    since=Version(1,3))


SuppDefRecord(
    """An arbitrary key/value property for a @eref{Location} definition.""",
    29,
    'LocationProperty',
    LocationRecord,
    StringAttribute(
        """Name of the property.""",
        'name'
    ),
    StringAttribute(
        """Property value.""",
        'stringValue',
        attic=Version(2,0)
    ),
    TypeAttribute(
        """\
        The type of this property.
        """,
        since=Version(2,0)
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value',
        since=Version(2,0)
    ),
    since=Version(1,3))

DefRecord(
    """\
    Each dimension in a Cartesian topology is composed of a global
    id, a name, its size, and whether it is periodic or not.
    """,
    30,
    'CartDimension',
    uint32_t,
    StringAttribute(
        """The name of the cartesian topology dimension.""",
        'name'
    ),
    Attribute(
        """The size of the cartesian topology dimension.""",
        uint32_t,
        'size'
    ),
    CartPeriodicityAttribute(
        """Periodicity of the cartesian topology dimension."""
    ),
    since=Version(1,3))

DefRecord(
    """\
    Each topology is described by a global id, a reference to its
    name, a reference to a communicator, the number of dimensions, and
    references to those dimensions. The topology type is defined by
    the paradigm of the group referenced by the associated
    communicator.
    """,
    31,
    'CartTopology',
    uint32_t,
    StringAttribute(
        """\
        The name of the topology.
        """,
        'name'
    ),
    CommAttribute(
        """Communicator object used to create the topology.""",
        'communicator',
    ),
    ArrayAttribute(
        """Number of dimensions.""",
        uint8_t,
        'numberOfDimensions',
        CartDimensionAttribute(
            """The dimensions of this topology."""
        )),
    since=Version(1,3))

SuppDefRecord(
    """\
    Defines the coordinate of the location referenced by the given
    rank (w.r.t. the communicator associated to the topology) in
    the referenced topology.
    """,
    32,
    'CartCoordinate',
    CartTopologyRecord,
    Attribute(
        """\
        The rank w.r.t. the communicator associated to
        the topology referencing this coordinate.
        """,
        uint32_t,
        'rank'
    ),
    ArrayAttribute(
        """Number of dimensions.""",
        uint8_t,
        'numberOfDimensions',
        Attribute(
            """Coordinates, indexed by dimension.""",
            uint32_t,
            'coordinates'
        )),
    since=Version(1,3))

DefRecord(
    """\
    The definition of a source code location as tuple of the corresponding
    file name and line number.

    When used to attach source code annotations to events, use the
    @eref{OTF2_AttributeList} with a @eref{Attribute} definition named
    @c "SOURCE_CODE_LOCATION" and typed @eref{OTF2_TYPE_SOURCE_CODE_LOCATION}.
    """,
    33,
    'SourceCodeLocation',
    uint32_t,
    StringAttribute(
        """\
        The name of the file for the source code location.
        """,
        'file'
    ),
    Attribute(
        """\
        The line number for the source code location.
        """,
        uint32_t,
        'lineNumber'
    ),
    since=Version(1,5),
    mapping_type=OTF2_MAPPING_SOURCE_CODE_LOCATION)

DefRecord(
    """\
    Defines a node in the calling context tree. These nodes are referenced in
    the @eref{CallingContextSample}, @eref{CallingContextEnter}, and
    @eref{CallingContextLeave} events.

    The referenced @eref{CallingContext} node in these events form a path which
    represents the calling context at this time.  This path will be partitioned
    into at most three sub-paths by the @a unwindDistance attribute.  For the
    @eref{CallingContextLeave} event, the @a unwindDistance is defined to be 1.

    Starting from the referenced @eref{CallingContext} node, the first
    @f$ N \ge 0 @f$ nodes were newly entered regions since the previous calling
    context event.  The next node is a region which was not left but made
    progress since the previous calling context event.  All other nodes did not
    make progress at all, and thus the regions were neither left nor entered
    again.  The @a unwindDistance is then @f$ N + 1 @f$. In case the
    @p unwindDistance is @f$ 0 @f$, there are neither newly entered regions nor
    regions which made progress.

    It is guaranteed, that the node referenced by the @a unwindDistance exists
    in the previous and current calling context.  All descendants of this node's
    child in the previous calling context were left since the previous calling
    context event.

    It is valid that this node is the @eref{OTF2_UNDEFINED_CALLING_CONTEXT}
    node and that this node is already reached after @a unwindDistance @f$ - 1 @f$
    steps.  In the latter case, there exists no region which made progress, all
    regions in the previous calling context were left and all regions in the
    current calling context were newly entered.

    Note that for @eref{CallingContextLeave} events, the parent of the
    referenced @eref{CallingContext} must be used as the previous calling
    context for the next event.

    Regions which were entered with a @eref{CallingContextEnter} event form an
    upper bound for the unwind distance, i.e., the @a unwindDistance points
    either to the parent of the last such entered region, or a node which is a
    descendant to this parent.

    To summarize, an @a unwindDistance of @f$ 0 @f$ means that no regions were
    left, newly entered, or made any progress.  An @a unwindDistance of @f$ 1 @f$
    means that some regions were left regarding the previous calling context, no
    regions were newly entered, and there was progress in the region of the
    first node.  An @a unwindDistance greater than @f$ 1 @f$ means that some
    regions were left regarding the previous calling context, there was progress
    in one region, and the first @a unwindDistance @f$ - 1 @f$ regions were
    newly entered.
    """,
    34,
    'CallingContext',
    uint32_t,
    RegionAttribute(
        """The region."""
    ),
    SourceCodeLocationAttribute(
        """The absolute source code location of this calling context."""
    ),
    SelfRefAttribute(
        """\
        Parent id of this context.
        """
    ),
    mapping_type=OTF2_MAPPING_CALLING_CONTEXT,
    since=Version(1,5),
    archive_callback='add_calling_context')

SuppDefRecord(
    """\
    An arbitrary key/value property for a @eref{CallingContext} definition.
    """,
    35,
    'CallingContextProperty',
    CallingContextRecord,
    StringAttribute(
        """Property name.""",
        'name'
    ),
    TypeAttribute(
        """\
        The type of this property. Must match with the defined type of the
        @a property.
        """
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value'
    ),
    since=Version(2,0))

DefRecord(
    """\
    Defines an interrupt generator which periodically triggers
    @eref{CallingContextSample} events.  If the mode of the interrupt generator
    is set to @eref{OTF2_INTERRUPT_GENERATOR_MODE_TIME}, the generator produces
    interrupts which are uniformly distributed over time, and the unit of the
    period is implicitly in seconds.  If the mode is
    @eref{OTF2_INTERRUPT_GENERATOR_MODE_COUNT}, the interrupt is triggered if a
    specific counter threshold is reached in the system.  Therefore these
    samples are unlikely to be uniformly distributed over time.  The unit of the
    period is then implicitly a number (threshold value).

    The interrupts period in base unit (which is implicitly seconds or number,
    based on the @p mode) is derived out of the @p base, the @p exponent, and
    the @p period attributes by this formula:

    base-period = period x base^exponent
    """,
    36,
    'InterruptGenerator',
    uint32_t,
    StringAttribute(
        """The name of this interrupt generator.""",
        'name'
    ),
    InterruptGeneratorModeAttribute(
        """Mode of the interrupt generator."""
    ),
    BaseAttribute(
        """\
        The base for the period calculation.
        """,
        'base'
    ),
    Attribute(
        """\
        The exponent for the period calculation.
        """,
        int64_t,
        'exponent'
    ),
    Attribute(
        """The period this interrupt generator generates interrupts.""",
        uint64_t,
        'period'
    ),
    mapping_type=OTF2_MAPPING_INTERRUPT_GENERATOR,
    since=Version(1,5))

GlobalOnlyDefRecord(
    """\
    Attests that the following parallel paradigm was available at the time when
    the trace was recorded, and vice versa.  Note that this does not attest that
    the paradigm was used.  For convenience, this also includes a proper name
    for the paradigm and a classification.  This definition is only allowed to
    appear at most once in the definitions per @eref{Paradigm}.
    """,
    6,
    'Paradigm',
    ParadigmAttribute(
        """\
        The paradigm to attest.
        """
    ),
    StringAttribute(
        """\
        The name of the paradigm.
        """,
        'name'
    ),
    ParadigmClassAttribute(
        """The class of this paradigm."""
    ),
    since=Version(1,5))

GlobalOnlyDefRecord(
    """\
    Extensible annotation for the @eref{Paradigm} definition.

    The tuple (@a paradigm, @a property) must be unique.
    """,
    7,
    'ParadigmProperty',
    ParadigmAttribute(
        """\
        The paradigm to annotate.
        """
    ),
    ParadigmPropertyAttribute(
        """\
        The property.
        """,
        'property'
    ),
    TypeAttribute(
        """\
        The type of this property. Must match with the defined type of the
        @a property.
        """
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value'
    ),
    since=Version(1,5))

GlobalOnlyDefRecord(
    """\
    Attests that the following I/O paradigm was available at the time when
    the trace was recorded, and vice versa.  Note that this does not attest that
    the paradigm was used.  For convenience, this also includes a proper name
    for the paradigm and a classification.
    """,
    8,
    'IoParadigm',
    StringAttribute(
        """\
        The I/O paradigm identification.  This should be used programmatically
        to identify a specific I/O paradigm.  For a human-readable name use the
        @p name attribute.  If this identification matches one of the known I/O
        paradigms listed in the OTF2 documentation @ref otf2_known_io_paradigms,
        then the attributes of this definition must match those specified there.
        """,
        'identification'
    ),
    StringAttribute(
        """\
        The name of the I/O paradigm.  This should be presented to humans as the
        name of this I/O paradigm.
        """,
        'name'
    ),
    IoParadigmClassAttribute(
        """The class of this I/O paradigm."""
    ),
    IoParadigmFlagAttribute(
        """Boolean properties of this I/O paradigm.""",
        'ioParadigmFlags'
    ),
    ArrayAttribute(
        """Number of properties.""",
        uint8_t,
        'numberOfProperties',
        IoParadigmPropertyAttribute(
            """\
            The property.
            """,
            'property'
        ),
        TypeAttribute(
            """\
            The type of this property. Must match with the defined type of the
            @a property.
            """
        ),
        AttributeValueAttribute(
            """The value of this property.""",
            'value'
        )),
    type=uint8_t,
    since=Version(2,1))

DefRecord(
    """\
    Defines a regular file from which an @eref{IoHandle} can be created.

    This definition is member of the polymorphic @eref{IoFile} definition
    class. All definitions of this polymorphic definition class share the
    same global identifier namespace.
    """,
    38,
    'IoRegularFile',
    uint32_t,
    StringAttribute(
        """Name of the file.""",
        'name'
    ),
    SystemTreeNodeAttribute(
        """\
        Defines the physical scope of this @eref{IoRegularFile} in the system tree. E.g.,
        two @eref{IoRegularFile} definitions with the same name but different @p scope
        values are physically different, thus I/O operations through @eref{IoHandle}s
        do not operate on the same file.
        """,
        'scope'
    ),
    since=Version(2,1),
    mapping_type=OTF2_MAPPING_IO_FILE,
    ref_name='IoFile')

SuppDefRecord(
    """\
    Extensible annotation for the polymorphic @eref{IoFile} definition class.

    The tuple (@a ioFile, @a name) must be unique.
    """,
    37,
    'IoFileProperty',
    IoRegularFileRecord,
    StringAttribute(
        """Property name.""",
        'name'
    ),
    TypeAttribute(
        """\
        The type of this property.
        """
    ),
    AttributeValueAttribute(
        """The value of this property.""",
        'value'
    ),
    since=Version(2,1))

DefRecord(
    """\
    Defines a directory from which an @eref{IoHandle} can be created.

    This definition is member of the polymorphic @eref{IoFile} definition
    class. All definitions of this polymorphic definition class share the
    same global identifier namespace.
    """,
    39,
    'IoDirectory',
    IoRegularFileRecord,
    StringAttribute(
        """Name of the directory.""",
        'name'
    ),
    SystemTreeNodeAttribute(
        """\
        Defines the physical scope of this @eref{IoDirectory} in the system tree. E.g.,
        two @eref{IoDirectory} definitions with the same name but different @p scope
        values are physically different, thus I/O operations through @eref{IoHandle}s
        do not operate on the same directory.
        """,
        'scope'
    ),
    since=Version(2,1))

DefRecord(
    """\
    Defines an I/O handle which will be used by subsequent I/O operations. I/O
    operations can only be applied to @emph{active} I/O handles. An I/O handle
    gets @emph{active} either if it was marked with the
    @eref{OTF2_IO_HANDLE_FLAG_PRE_CREATED} flag, after it was referenced in an
    @eref{IoCreateHandle} event, or it was referenced in the @a newHandle
    attribute of an @eref{IoDuplicateHandle} event. It gets @emph{inactive} if
    it was referenced in an @eref{IoDestroyHandle} event. This life cycle can be
    repeated indefinitely. Though the @eref{OTF2_IO_HANDLE_FLAG_PRE_CREATED}
    flag is unset after a @eref{IoDuplicateHandle} event. All @eref{Location}s
    of a @eref{LocationGroup} have access to an @emph{active} @eref{IoHandle},
    regardless which @eref{Location} of the @eref{LocationGroup} activated
    the @eref{IoHandle}.
    """,
    40,
    'IoHandle',
    uint32_t,
    StringAttribute(
        """Handle name.""",
        'name'
    ),
    IoFileAttribute(
        """File identifier.""",
        'file'
    ),
    IoParadigmAttribute(
        """\
        The I/O paradigm.
        """
    ),
    IoHandleFlagAttribute(
        """\
        Special characteristics of this handle.
        """,
        'ioHandleFlags'
    ),
    CommAttribute(
        """\
        Scope of the file handle. This scope defines which process can access
        this file via this handle and also defines the collective context for
        this handle.
        """
    ),
    SelfRefAttribute(
        """\
        Parent, in case this I/O handle was created and operated by an
        higher-level I/O paradigm.
        """
    ),
    since=Version(2,1),
    mapping_type=OTF2_MAPPING_IO_HANDLE)

SuppDefRecord(
    """\
    Provide the I/O access mode and status flags for @emph{pre-created}
    @eref{IoHandle}s.

    Only allowed once for a @eref{IoHandle} definition with the
    @eref{OTF2_IO_HANDLE_FLAG_PRE_CREATED} flag set.
    """,
    41,
    'IoPreCreatedHandleState',
    IoHandleRecord,
    IoAccessModeAttribute(
        """The access mode of the @emph{pre-created} @eref{IoHandle}.""",
        'mode'
    ),
    IoStatusFlagAttribute(
        """The status flags of the @emph{pre-created} @eref{IoHandle}.""",
        'statusFlags'
    ),
    since=Version(2,1))

SuppDefRecord(
    """A parameter for a callpath definition.""",
    42,
    'CallpathParameter',
    CallpathRecord,
    ParameterAttribute(
        """The parameter of this callpath."""
    ),
    TypeAttribute(
        """\
        The type of the attribute value. Must match the type of the parameter.
        """
    ),
    AttributeValueAttribute(
        """The value of the parameter for this callpath.""",
        'value'
    ),
    since=Version(2,2))

