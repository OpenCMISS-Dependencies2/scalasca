
                    CUBE WRITER LIBRARY INSTALL GUIDE
                    =================================

This file describes how to configure, compile, and install the Cube Profile 
writer library (CubeW).  If you are not familiar with using the configure scripts 
generated by GNU autoconf, read the "Generic Installation Instructions" 
section below; then return here.  Also, make sure to carefully read and 
follow the platform-specific installation notes (especially when building 
for Intel Xeon Phi co-processors).


Prerequisites
=============

To build CubeW, various tools and packages are required:

  * ISO C++98 compiler
  * ISO C99 compiler
  * A "working" POSIX-compatible shell
  * A POSIX-compatible make


Optionally, CubeW can be configured to use the following support
libraries: 

  * zlib library v1.2.3 or newer        (http://www.zlib.net/)

       The zlib library is only needed if the perfromance data should be compressed.
       Keep in mind that this might lead to lower performance. 
       In cross-compiling environments, zlib has to be compiled for
       the compute nodes (i.e., backend).

Quick start
===========

In a nutshell, configuring, building, and installing CubeW can be as
simple as executing the shell commands

    ./configure --prefix=<installdir>
    make
    make install

Depending on your system configuration and specific needs, the build process
can be customized as described below.


Configuration
=============

The configure script in this package tries to automatically determine the
platform for which CubeW will be compiled in order to provide reasonable
defaults for backend (i.e., compute-node) compilers, MPI compilers, and, in
case of cross-compiling environments, frontend (i.e., login-node) compilers.

Depending on the environment it is possible to override the platform defaults
by using the following configure options:

In non-cross-compiling environments, the compiler suite used to build the
backend parts can be specified explicitly if desired.  On Linux clusters it
is currently recommended to use this option to select a compiler suite other
than GCC.

  --with-nocross-compiler-suite=(gcc|ibm|intel|pgi|studio|open64|clang)
               The compiler suite used to build this package in
               non-cross-compiling environments.  Needs to be in $PATH.
               [Default: gcc]

In cross-compiling environments, the compiler suite used to build the
frontend parts can be specified explicitly if desired.

  --with-frontend-compiler-suite=(gcc|ibm|intel|pgi|studio|open64|clang)
               The compiler suite used to build the frontend parts of
               this package in cross-compiling environments.  Needs to
               be in $PATH.  
               [Default: gcc]

If a particular system requires to use compilers different to those CubeW
currently supports, please edit the four files
build-config/common/platforms/platform-*-user-provided to your needs
and use the following configure option:

  --with-custom-compilers
               Customize compiler settings by 1. copying the four
               files
               <srcdir>/build-config/common/platforms/platform-*-user-provided
               to the directory where you run configure <builddir>,
               2. editing those files to your needs, and 3. running
               configure.  Alternatively, edit the files under <srcdir>
               directly.  Files in <builddir> take precedence.  You are
               entering unsupported terrain.  Namaste, and good luck!

On cross-compile systems the default frontend compiler is IBM XL for the Blue
Gene series and GCC on all other platforms.  The backend compilers will
either be automatically selected by the platform detection (IBM Blue Gene
series) or by the currently loaded environment modules (Cray XT series).  If
you want to customize these settings, please use the configure option
'--with-custom-compilers' as described above.

The following options can be used to provide the installation paths of
the 'libz' and 'libiberty' libraries in case configure is unable to determine
them automatically:

  --with-backend-libz=(yes|no|<Path to libz installation for backend>)
                          If you want to build CubeW with libz but do not
                          have a libz in a standard location, you need to
                          explicitly specify the directory where it is
                          installed.  On non-cross-compile systems we search
                          the system include and lib paths per default [yes];
                          on cross-compile systems, however, you have to
                          specify a path [no]. 
  --with-frontend-libz=(yes|no|<Path to libz installation for frontend>)
                          If you want to build CubeW with libz but do not
                          have a libz in a standard location, you need to
                          explicitly specify the directory where it is
                          installed.  On non-cross-compile systems we search
                          the system include and lib paths per default [yes];
                          on cross-compile systems, however, you have to
                          specify a path [no]. 
  --with-compression=(yes|no)
                          Enables or disables general support for zlib 
                          compression. Per default is [yes]. 
                          Further one enables compression during the runtime 
                          using environment variable CUBEW_ZLIB_COMPRESSION=yes|true
  --with-advanced-memory | --without-advanced-memory
                          Enables (dafault: disabled) advanced memory features 
                          such as usage of an external memory allocator.
  --with-memory-tracking | --without-memory-tracking
                          Enables (dafault: disabled) internal memory 
                          tracking (requires --with-advanced-memory).
  --with-memory-tracing | --without-memory-tracing
                          Enables (dafault: disabled)  internal memory tracing
                          (requires --with-advanced-memory), more intensive 
                          memory usage report.

                          
                          
Finally, to enable a build for Intel Xeon Phi co-processors (such as Knights
Corner), the option '--enable-platform-mic' can be used.  For such systems,
special care has to be taken.  Thus, please carefully read and follow the
platform-specific installation notes below.  Note that *no* special treatment
is required for *self-hosted* Xeon Phi platforms (such as Knights Landing).

CubeW's build system also supports some additional configuration options,
including many standard GNU autotools options.  To get the full list of
supported configuration options, run './configure --help=recursive'.

Instead of passing command-line options to the 'configure' script, the
package configuration can also be influenced by setting the following
environment variables:

  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  OTF_CONFIG  config script used for otf
  OTF_CFLAGS  CFLAGS used for the otf
  OTF_LIBS    LIBS used for the otf
  CXXCPP      C++ preprocessor
  CC_FOR_BUILD
              C compiler command for the frontend build
  CXX_FOR_BUILD
              C++ compiler command for the frontend build
  F77_FOR_BUILD
              Fortran 77 compiler command for the frontend build
  FC_FOR_BUILD
              Fortran compiler command for the frontend build
  CPPFLAGS_FOR_BUILD
              (Objective) C/C++ preprocessor flags for the frontend build,
              e.g. -I<include dir> if you have headers in a nonstandard
              directory <include dir>
  CFLAGS_FOR_BUILD
              C compiler flags for the frontend build
  CXXFLAGS_FOR_BUILD
              C++ compiler flags for the frontend build
  FFLAGS_FOR_BUILD
              Fortran 77 compiler flags for the frontend build
  FCFLAGS_FOR_BUILD
              Fortran compiler flags for the frontend build
  LDFLAGS_FOR_BUILD
              linker flags for the frontend build, e.g. -L<lib dir> if you
              have libraries in a nonstandard directory <lib dir>
  LIBS_FOR_BUILD
              libraries to pass to the linker for the frontend build, e.g.
              -l<library>
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  LIBIBERTY_INCLUDE
              Path to libiberty headers.
  LIBIBERTY_LIB
              Path to libiberty libraries.
  LIBZ_INCLUDE
              Path to libz headers.
  LIBZ_LIB    Path to libz libraries.


Building & Installing
=====================

Before building CubeW, carefully check whether the configuration
summary printed by the configure script matches your expectations (i.e.,
whether zlib and/or OpenMP support is correctly enabled/disabled, external
libraries are used, etc).  If everything is OK, CubeW can be built and
installed using

        make
        make install

Note that parallel builds (i.e., using 'make -j <n>') are fully supported.




                      Platform-specific Instructions
                      ==============================

Intel Xeon Phi (aka. MIC) co-processors
=======================================

   [Note: The following instructions only apply to Intel Xeon Phi 
co-processors, like the Knights Corner (KNC). They do not apply to 
self-hosted Xeon Phis, like the Knights Landing (KNL); for these 
platforms no special treatment is required.]

   Building CubeW for Intel Xeon Phi co-processors requires some extra
care, and in some cases two installations into the same location.  Therefore,
we strongly recommend to strictly follow the procedure as described below.

  1. Ensure that Intel compilers and Intel MPI (if desired) are
     installed and available in $PATH, and that the Intel Manycore
     Platform Software Stack (MPSS) is installed.

  2. Configure CubeW to use the MIC platform:

       ./configure --enable-platform-mic [other options, e.g., '--prefix']

  3. Build and install:

       make; make install

   In case a native MIC-only installation serves your needs, that's it.
However, if the installation should also support analysis of host code, a
second installation *on top* of the just installed one is required:

  4. Remove MIC program binaries, object files, and configure-generated files
     from the build/source-code directory:

       make distclean

  5. Reconfigure for the host using *identical directory options* (e.g.,
     '--prefix' or '--bindir') as in step 2:

       ./configure [other options as used in step 2]

     This will automatically detect the already existing native MIC build and
     enable the required support in the host tools.  On non-cross-compile
     systems (e.g., typical Linux clusters), make sure to explicitly select
     Intel compiler support by passing '--with-nocross-compiler-suite=intel'
     to the configure script.

  6. Build and install:

       make; make install

   Note that this approach also works with VPATH builds (even with two
separate build directories) as long as the same options defining directory
locations are passed in steps 2 and 5.




                     Generic Installation Instructions
                     =================================

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following more-detailed
instructions are generic; see the section above for instructions
specific to this package.  Some packages provide this `INSTALL' file but
do not implement all of the features documented below.  The lack of an
optional feature in a given package is not necessarily a bug.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to CubeW@fz-juelich.de so they can be
considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

   The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package, generally using the just-built uninstalled binaries.

  4. Type `make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the `make install' phase executed with root
     privileges.

  5. Optionally, type `make installcheck' to repeat any self-tests, but
     this time using the binaries in their final installed location.
     This target does not install anything.  Running this target as a
     regular user, particularly if the prior `make install' required
     root privileges, verifies that the installation completed
     correctly.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  7. Often, you can also type `make uninstall' to remove the installed
     files again.  In practice, not all packages have tested that
     uninstallation works correctly, even though it is required by the
     GNU Coding Standards.

  8. Some packages, particularly those that use Automake, provide `make
     distcheck', which can by used by developers to test that all other
     targets like `make install' and `make uninstall' work correctly.
     This target is generally not run by end users.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  This
is known as a "VPATH" build.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

   On MacOS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple `-arch' options to the
compiler but only a single `-arch' option to the preprocessor.  Like
this:

     ./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CPP="gcc -E" CXXCPP="g++ -E"

   This is not guaranteed to produce working output in all cases, you
may have to build one architecture at a time and combine the results
using the `lipo' tool if you have problems.

Installation Names
==================

   By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX', where PREFIX must be an
absolute file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.  In general, the
default for these options is expressed in terms of `${prefix}', so that
specifying just `--prefix' will affect all of the other directory
specifications that were not explicitly provided.

   The most portable way to affect installation locations is to pass the
correct locations to `configure'; however, many packages provide one or
both of the following shortcuts of passing variable assignments to the
`make install' command line to change installation locations without
having to reconfigure or recompile.

   The first method involves providing an override variable for each
affected directory.  For example, `make install
prefix=/alternate/directory' will choose an alternate location for all
directory configuration variables that were expressed in terms of
`${prefix}'.  Any directories that were specified during `configure',
but not in terms of `${prefix}', must each be overridden at install
time for the entire installation to be relocated.  The approach of
makefile variable overrides for each directory variable is required by
the GNU Coding Standards, and ideally causes no recompilation.
However, some platforms have known limitations with the semantics of
shared libraries that end up requiring recompilation when using this
method, particularly noticeable in packages that use GNU Libtool.

   The second method involves providing the `DESTDIR' variable.  For
example, `make install DESTDIR=/alternate/directory' will prepend
`/alternate/directory' before all installation names.  The approach of
`DESTDIR' overrides is not required by the GNU Coding Standards, and
does not work on platforms that have drive letters.  On the other hand,
it does better at avoiding recompilation issues, and works well even
when some directory options were not specified in terms of `${prefix}'
at `configure' time.

Optional Features
=================

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

   Some packages offer the ability to configure how verbose the
execution of `make' will be.  For these packages, running `./configure
--enable-silent-rules' sets the default to minimal output, which can be
overridden with `make V=1'; while running `./configure
--disable-silent-rules' sets the default to verbose, which can be
overridden with `make V=0'.

Particular systems
==================

   On HP-UX, the default C compiler is not ANSI C compatible.  If GNU
CC is not installed, it is recommended to use the following options in
order to use an ANSI C compiler:

     ./configure CC="cc -Ae -D_XOPEN_SOURCE=500"

and if that doesn't work, install pre-built binaries of GCC for HP-UX.

   On OSF/1 a.k.a. Tru64, some versions of the default C compiler cannot
parse its `<wchar.h>' header file.  The option `-nodtk' can be used as
a workaround.  If GNU CC is not installed, it is therefore recommended
to try

     ./configure CC="cc"

and if that doesn't work, try

     ./configure CC="cc -nodtk"

   On Solaris, don't put `/usr/ucb' early in your `PATH'.  This
directory contains several dysfunctional programs; working variants of
these programs are available in `/usr/bin'.  So, if you need `/usr/ucb'
in your `PATH', put it _after_ `/usr/bin'.

   On Haiku, software installed for all users goes in `/boot/common',
not `/usr/local'.  It is recommended to use the following options:

     ./configure --prefix=/boot/common

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS
     KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

