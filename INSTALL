
                         SCALASCA v2 INSTALL GUIDE
                         =========================

This file describes how to configure, compile, and install the Scalasca Trace
Tools package.  If you are not familiar with using the configure scripts
generated by GNU autoconf, read the "Generic Installation Instructions"
section below; then return here.  Also, make sure to carefully read and
follow the platform-specific installation notes (especially when building for
Intel Xeon Phi co-processors).


Prerequisites
=============

To build Scalasca v2, various tools and packages are required:

  * ISO C++98 compiler
  * ISO C99 compiler
  * A "working" POSIX-compatible shell
  * A POSIX-compatible make
  * A Message Passing Interface (MPI) library supporting MPI 1.2 or higher
    (Although Scalasca can be configured without MPI support, this setup
    is hardly useful in practice.)

Moreover, the following packages are *strongly recommended* to make effective
use of Scalasca.  While they are not strictly necessary for building, some
commands of those packages are used at runtime.  The version ranges reflect
the state at the time of release.  While we usually recommend to use the
most recent versions for new installs, versions newer than listed below may
or may not work (e.g., due to API changes).  Thus, please also check the
"Build requirements" page on the Scalasca website for up-to-date information
(https://www.scalasca.org/scalasca/software/scalasca-2.x/requirements.html).

  * Score-P                        (https://www.score-p.org)

       Minimum version: v1.2       Tested up to: v7.0

       Scalasca v2 is based on the community instrumentation and measurement
       infrastructure Score-P.  To generate event traces for Scalasca to
       analyze, a working installation of Score-P is therefore required.

  * Cube C++ library and tools     (https://www.scalasca.org/software/cube-4.x/)

       Minimum version: v4.4       Tested up to: v4.6

       Various Cube command-line tools are implicitly used by Scalasca's
       report scoring and post-processing.  Thus, a working installation of
       the Cube C++ library and tools is required.

  * Cube GUI                       (https://www.scalasca.org/software/cube-4.x/)

       Minimum version: v4.4       Tested up to: v4.6

       To examine the analysis reports generated by the Scalasca Trace Tools,
       the Cube Graphical User Interface (built on top of the aforementioned
       Cube C++ libraries) is recommended.  The Cube GUI may also be launched
       through Scalasca's convenience commands.

Optionally, Scalasca v2 can be configured to use the following support
libraries:

  * Cube C Writer library          (https://www.scalasca.org/software/cube-4.x/)

       Minimum version: v4.4       Tested up to: v4.6

       Although the Scalasca tarball comes with a recent version of the Cube
       C Writer library included, it might be desired to use a separate
       installation instead (e.g., to "share" with the Score-P measurement
       system).

  * OTF2 library                   (https://www.score-p.org/)

       Minimum version: v2.1       Tested up to: v2.3

       Likewise, the Scalasca tarball includes a recent version of the OTF2
       library.  However, it might be desired to use a separate installation
       instead (e.g., to "share" with the Score-P measurement system).

  * SIONlib library                (https://www.fz-juelich.de/jsc/sionlib)

       Minimum version: v1.5.5     Tested up to: v1.7.6

       The SIONlib library is only needed if the OTF2 library (either the
       included copy or an external installation) shall be configured to
       support SIONlib container files for storing trace data.

  * zlib library                   (https://www.zlib.net/)

       Minimum version: v1.2.3     Tested up to: v1.2.11

       The zlib library is only needed if backwards compatibility support for
       compressed trace files in EPILOG format (generated by Scalasca v1) or
       writing of compressed Cube reports is desired.  In cross-compiling
       environments, zlib has to be compiled for the compute nodes (i.e.,
       backend).

  * GNU liberty library

       The GNU liberty library is only required if getopt_long_only() is not
       part of the system's C library.  It is distributed as part of GNU gcc,
       gdb, and binutils.  In cross-compiling environments, liberty has to be
       compiled for the frontend.


Quick start
===========

In a nutshell, configuring, building, and installing Scalasca can be as
simple as executing the shell commands

    ./configure --prefix=<installdir>
    make
    make install

Depending on your system configuration and specific needs, the build process
can be customized as described below.


Configuration
=============

The configure script in this package tries to automatically determine the
platform for which Scalasca will be compiled in order to provide reasonable
defaults for backend (i.e., compute node) compilers, MPI compilers, and--in
case of cross-compiling environments--frontend (i.e., login node) compilers.

Depending on the environment it is possible to override the platform defaults
by using the following configure options:

In non-cross-compiling environments, the compiler suite used to build the
backend parts can be specified explicitly if desired.  On Linux clusters it
is currently recommended to use this option to select a compiler suite other
than GCC.

  --with-nocross-compiler-suite=(gcc|ibm|intel|pgi|studio|clang|aocc)
               The compiler suite used to build this package in
               non-cross-compiling environments.  Needs to be in $PATH.
               [Default: gcc]

  Note: if you select 'pgi', CXX will be set to 'pgc++', which is PGI's
  default C++ compiler in recent releases.  If you have a PGI compiler
  installation prior to v16.1, you might want to use 'pgCC' instead (e.g.,
  if your MPI C++ compiler wrappers use this one).  To select pgCC, please
  add 'CXX=pgCC' to your configure line.
  Note: for the NVIDIA HPC SDK, select 'pgi'.

In cross-compiling environments, the compiler suite used to build the
frontend parts can be specified explicitly if desired.

  --with-frontend-compiler-suite=(gcc|ibm|intel|pgi|studio|clang|aocc)
               The compiler suite used to build the frontend parts of
               this package in cross-compiling environments.  Needs to
               be in $PATH.
               [Default: gcc]

The MPI compiler, if in $PATH, is usually autodetected.  If there are several
MPI compilers found in $PATH, the user is requested to select one using the
configure option:

  --with-mpi=(bullxmpi|hp|ibmpoe|intel|intel2|intel3|intelpoe|lam| \
              mpibull2|mpich|mpich2|mpich3|openmpi|openmpi3|platform| \
              scali|sgimpt|sgimptwrapper|spectrum|sun)
               The MPI compiler suite to build this package in non
               cross-compiling mode.  Usually autodetected.  Needs to
               be in $PATH.

               For some MPI implementations, multiple versions with different
               characteristics are supported:

                 intel     -  Intel MPI 1.x
                 intel2    -  Intel MPI 2.x to 4.x
                 intel3    -  Intel MPI 5.x and newer
                 mpich     -  MPICH 1.x
                 mpich2    -  MPICH2 1.x
                 mpich3    -  MPICH 3.x
                 openmpi   -  Open MPI 1.x and 2.x
                 openmpi3  -  Open MPI 3.x and newer

               When using this option, make sure to specify the correct
               configuration.  Note that MPICH configurations can also be
               used for derived implementations such as MVAPICH or
               ParaStation MPI; likewise for Open MPI.

Note that there is currently no consistency check whether backend and MPI
compiler are from the same vendor.  If they are not, linking problems
(undefined references) might occur.

If a particular system requires to use compilers different to those Scalasca
currently supports, please edit the files
build-config/common/platforms/platform-*-user-provided to your needs
and use the following configure option:

  --with-custom-compilers
               Customize compiler settings by 1. copying the files
               <srcdir>/build-config/common/platforms/platform-*-user-provided
               to the directory where you run configure <builddir>,
               2. editing those files to your needs, and 3. running
               configure.  Alternatively, edit the files under <srcdir>
               directly.  Files in <builddir> take precedence.  You are
               entering unsupported terrain.  Namaste, and good luck!

On cross-compile systems the default frontend compiler is IBM XL for the Blue
Gene series and GCC on all other platforms.  The backend compilers will
either be automatically selected by the platform detection (IBM Blue Gene
series) or by the currently loaded environment modules (Cray XT/XE/XK/XC
series).  If you want to customize these settings, please use the configure
option '--with-custom-compilers' as described above.

It is also possible to explicitly disable support for MPI and/or OpenMP using
the following options, though this should be rarely necessary.

  --disable-openmp        Disable OpenMP support
  --without-mpi           Disable MPI support

Although this package comes with recent versions of the OTF2 and Cube C Writer
libraries included, it is possible to use existing installations instead:

  --with-otf2[=<otf2-bindir>]
                          Use an already installed and compatible OTF2
                          library.  Provide path to otf2-config.
                          Auto-detected if already in $PATH.
  --with-cubew[=<cubew-bindir>]
                          Use an already installed and compatible Cube
                          library.  Provide path to cubew-config.
                          Auto-detected if already in $PATH.

To enable SIONlib support in the included OTF2 library, the following option
is required.  It has no effect if an external OTF2 installation is used (as
it was already compiled with or without SIONlib support).

  --with-sionlib[=<sionlib-bindir>]
                          Use an already installed sionlib.  Provide
                          path to sionconfig.  Auto-detected if already
                          in $PATH.

The following two options can be used to provide the installation paths of
the 'libz' and 'libiberty' libraries in case configure is unable to determine
them automatically:

  --with-libz=(yes|no|<Path to libz installation>)
                          If you want to build Scalasca with libz but do not
                          have a libz in a standard location, you need to
                          explicitly specify the directory where it is
                          installed.  On non-cross-compile systems we search
                          the system include and lib paths per default [yes];
                          on cross-compile systems, however, you have to
                          specify a path [no]. --with-libz is a shorthand for
                          --with-libz-include=<Path/include> and
                          --with-libz-lib=<Path/lib>.  If these shorthand
                          assumptions are not correct, you can use the
                          explicit include and lib options directly.

  --with-libiberty=(yes|no|<Path to libiberty installation>)
                          If you want to build Scalasca with libiberty but do
                          not have a (frontend) libiberty in a standard
                          location, you need to explicitly specify the
                          directory where it is installed
                          (--with-libiberty=<libiberty-install-dir>) [yes].
                          This is a shorthand for
                          --with-libiberty-include=<Path/include> and
                          --with-libiberty-lib=<Path/lib>.  If these
                          shorthand assumptions are not correct, you can use
                          the explicit include and lib options directly.

The '--with-libiberty' option should only be used if directed by configure or
the detected implementation of getopt_long_only() is known to be broken.

Finally, to enable a build for Intel Xeon Phi co-processors (such as Knights
Corner), the option '--enable-platform-mic' can be used.  For such systems,
special care has to be taken.  Thus, please carefully read and follow the
platform-specific installation notes below.  Note that *no* special treatment
is required for *self-hosted* Xeon Phi platforms (such as Knights Landing).

Scalasca's build system also supports some additional configuration options,
including many standard GNU autotools options.  To get the full list of
supported configuration options, run './configure --help=recursive'.

Instead of passing command-line options to the 'configure' script, the
package configuration can also be influenced by setting the following
environment variables:

  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  OTF_CONFIG  config script used for otf
  OTF_CFLAGS  CFLAGS used for the otf
  OTF_LIBS    LIBS used for the otf
  CXXCPP      C++ preprocessor
  CC_FOR_BUILD
              C compiler command for the frontend build
  CXX_FOR_BUILD
              C++ compiler command for the frontend build
  F77_FOR_BUILD
              Fortran 77 compiler command for the frontend build
  FC_FOR_BUILD
              Fortran compiler command for the frontend build
  CPPFLAGS_FOR_BUILD
              (Objective) C/C++ preprocessor flags for the frontend build,
              e.g. -I<include dir> if you have headers in a nonstandard
              directory <include dir>
  CFLAGS_FOR_BUILD
              C compiler flags for the frontend build
  CXXFLAGS_FOR_BUILD
              C++ compiler flags for the frontend build
  FFLAGS_FOR_BUILD
              Fortran 77 compiler flags for the frontend build
  FCFLAGS_FOR_BUILD
              Fortran compiler flags for the frontend build
  LDFLAGS_FOR_BUILD
              linker flags for the frontend build, e.g. -L<lib dir> if you
              have libraries in a nonstandard directory <lib dir>
  LIBS_FOR_BUILD
              libraries to pass to the linker for the frontend build, e.g.
              -l<library>
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  LIBIBERTY_INCLUDE
              Path to libiberty headers.
  LIBIBERTY_LIB
              Path to libiberty libraries.
  LIBZ_INCLUDE
              Path to libz headers.
  LIBZ_LIB    Path to libz libraries.
  MPICC       MPI C compiler command
  MPI_CFLAGS  MPI C compiler flags
  MPICXX      MPI C++ compiler command
  MPI_CPPFLAGS
              MPI (Objective) C/C++ preprocessor flags, e.g. -I<include dir>
              if you have headers in a nonstandard directory <include dir>
  MPI_CXXFLAGS
              MPI C++ compiler flags
  MPI_LDFLAGS MPI linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  MPI_LIBS    MPI libraries to pass to the linker, e.g. -l<library>
  BACKEND_TEST_RUNS_NON_RECURSIVE
              Whether to prevent passing --enable-backend-test-runs to
              sub-packages.  Activation values are '1', 'yes', and 'true'.


Building & Installing
=====================

Before building the Scalasca Trace Tools, carefully check whether the
configuration summary printed by the configure script matches your
expectations (i.e., whether MPI and/or OpenMP support is correctly
enabled/disabled, external libraries are used, etc).  If everything is
OK, the Scalasca Trace Tools can be built and installed using

        make
        make install

Note that parallel builds (i.e., using 'make -j <n>') are fully supported.




                      Platform-specific Instructions
                      ==============================

Intel Xeon Phi (aka. MIC) co-processors
=======================================

   [Note: The following instructions only apply to Intel Xeon Phi
co-processors, like the Knights Corner (KNC).  They do not apply to
self-hosted Xeon Phis, like the Knights Landing (KNL); for these
platforms no special treatment is required.]

   Building Scalasca for Intel Xeon Phi co-processors requires some extra
care, and in some cases two installations into the same location.  Therefore,
we strongly recommend to strictly follow the procedure as described below.

  1. Ensure that Intel compilers and Intel MPI (if desired) are
     installed and available in $PATH, and that the Intel Manycore
     Platform Software Stack (MPSS) is installed.

  2. Configure Scalasca to use the MIC platform:

       ./configure --enable-platform-mic [other options, e.g., '--prefix']

  3. Build and install:

       make; make install

   In case a native MIC-only installation serves your needs, that's it.
However, if the installation should also support analysis of host code, a
second installation *on top* of the just installed one is required:

  4. Remove MIC program binaries, object files, and configure-generated files
     from the build/source-code directory:

       make distclean

  5. Reconfigure for the host using *identical directory options* (e.g.,
     '--prefix' or '--bindir') as in step 2:

       ./configure [other options as used in step 2]

     This will automatically detect the already existing native MIC build and
     enable the required support in the host tools.  On non-cross-compile
     systems (e.g., typical Linux clusters), make sure to explicitly select
     Intel compiler support by passing '--with-nocross-compiler-suite=intel'
     to the configure script.

  6. Build and install:

       make; make install

   Note that this approach also works with VPATH builds (even with two
separate build directories) as long as the same options defining directory
locations are passed in steps 2 and 5.


Cray XC systems
===============

   The PGI C++ 17.x compilers are known to have problems with static linking.
This will result in "undefined reference" linking errors when compiling the
Scalasca Trace Tools.  The suggested workaround is to use dynamic linking by
exporting the environment variable 'CRAYPE_LINK_TYPE=dynamic' before running
'configure' and 'make'.



                     Generic Installation Instructions
                     =================================

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following more-detailed
instructions are generic; see the section above for instructions
specific to this package.  Some packages provide this `INSTALL' file but
do not implement all of the features documented below.  The lack of an
optional feature in a given package is not necessarily a bug.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to scalasca@fz-juelich.de so they can be
considered for the next release.  If you are using the cache, and at
some point `config.cache' contains results you don't want to keep, you
may remove or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

   The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package, generally using the just-built uninstalled binaries.

  4. Type `make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the `make install' phase executed with root
     privileges.

  5. Optionally, type `make installcheck' to repeat any self-tests, but
     this time using the binaries in their final installed location.
     This target does not install anything.  Running this target as a
     regular user, particularly if the prior `make install' required
     root privileges, verifies that the installation completed
     correctly.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  7. Often, you can also type `make uninstall' to remove the installed
     files again.  In practice, not all packages have tested that
     uninstallation works correctly, even though it is required by the
     GNU Coding Standards.

  8. Some packages, particularly those that use Automake, provide `make
     distcheck', which can by used by developers to test that all other
     targets like `make install' and `make uninstall' work correctly.
     This target is generally not run by end users.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  This
is known as a "VPATH" build.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

   On MacOS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple `-arch' options to the
compiler but only a single `-arch' option to the preprocessor.  Like
this:

     ./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CPP="gcc -E" CXXCPP="g++ -E"

   This is not guaranteed to produce working output in all cases, you
may have to build one architecture at a time and combine the results
using the `lipo' tool if you have problems.

Installation Names
==================

   By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX', where PREFIX must be an
absolute file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.  In general, the
default for these options is expressed in terms of `${prefix}', so that
specifying just `--prefix' will affect all of the other directory
specifications that were not explicitly provided.

   The most portable way to affect installation locations is to pass the
correct locations to `configure'; however, many packages provide one or
both of the following shortcuts of passing variable assignments to the
`make install' command line to change installation locations without
having to reconfigure or recompile.

   The first method involves providing an override variable for each
affected directory.  For example, `make install
prefix=/alternate/directory' will choose an alternate location for all
directory configuration variables that were expressed in terms of
`${prefix}'.  Any directories that were specified during `configure',
but not in terms of `${prefix}', must each be overridden at install
time for the entire installation to be relocated.  The approach of
makefile variable overrides for each directory variable is required by
the GNU Coding Standards, and ideally causes no recompilation.
However, some platforms have known limitations with the semantics of
shared libraries that end up requiring recompilation when using this
method, particularly noticeable in packages that use GNU Libtool.

   The second method involves providing the `DESTDIR' variable.  For
example, `make install DESTDIR=/alternate/directory' will prepend
`/alternate/directory' before all installation names.  The approach of
`DESTDIR' overrides is not required by the GNU Coding Standards, and
does not work on platforms that have drive letters.  On the other hand,
it does better at avoiding recompilation issues, and works well even
when some directory options were not specified in terms of `${prefix}'
at `configure' time.

Optional Features
=================

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

   Some packages offer the ability to configure how verbose the
execution of `make' will be.  For these packages, running `./configure
--enable-silent-rules' sets the default to minimal output, which can be
overridden with `make V=1'; while running `./configure
--disable-silent-rules' sets the default to verbose, which can be
overridden with `make V=0'.

Particular systems
==================

   On HP-UX, the default C compiler is not ANSI C compatible.  If GNU
CC is not installed, it is recommended to use the following options in
order to use an ANSI C compiler:

     ./configure CC="cc -Ae -D_XOPEN_SOURCE=500"

and if that doesn't work, install pre-built binaries of GCC for HP-UX.

   On OSF/1 a.k.a. Tru64, some versions of the default C compiler cannot
parse its `<wchar.h>' header file.  The option `-nodtk' can be used as
a workaround.  If GNU CC is not installed, it is therefore recommended
to try

     ./configure CC="cc"

and if that doesn't work, try

     ./configure CC="cc -nodtk"

   On Solaris, don't put `/usr/ucb' early in your `PATH'.  This
directory contains several dysfunctional programs; working variants of
these programs are available in `/usr/bin'.  So, if you need `/usr/ucb'
in your `PATH', put it _after_ `/usr/bin'.

   On Haiku, software installed for all users goes in `/boot/common',
not `/usr/local'.  It is recommended to use the following options:

     ./configure --prefix=/boot/common

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS
     KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.
