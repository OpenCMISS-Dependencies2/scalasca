##*************************************************************************##
##  SCALASCA    http://www.scalasca.org/                                   ##
##*************************************************************************##
##  Copyright (c) 1998-2015                                                ##
##  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          ##
##                                                                         ##
##  Copyright (c) 2009-2013                                                ##
##  German Research School for Simulation Sciences GmbH,                   ##
##  Laboratory for Parallel Programming                                    ##
##                                                                         ##
##  This software may be modified and distributed under the terms of       ##
##  a BSD-style license.  See the COPYING file in the package base         ##
##  directory for details.                                                 ##
##*************************************************************************##


PROLOG {
    #include <iostream>

    #include <pearl/AmListenerFactory.h>
    #include <pearl/AmRequestFactory.h>
    #include <pearl/Communicator.h>

    #if defined(_MPI)
        #include <pearl/AmRuntime.h>
        #include <pearl/MpiAmListener.h>
        #include <pearl/MpiAmRequest.h>

        #include "AmLockContention.h"
        #include "AmSeverityExchange.h"
        #include "AmSyncpointExchange.h"
        #include "AmWaitForProgressRequest.h"
        #include "AmWaitForProgressResponse.h"
    #endif    // _MPI


    extern bool enableAsynchronous;
}


PATTERN "ASYNC" = [
    NAME      = "ASYNC"
    TYPE      = "MPI"
    DOCNAME   = "Asyncronous Driver"
    CLASS     = "PatternAsync"
    INFO      = "Driver for asynchronous pattern detection"
    CONDITION = "enableAsynchronous"
    DESCR     = {
        This pattern is only the driver for any asynchronous pattern detection.
    }
    DIAGNOSIS = {
        No diagnosis needed.
    }
    UNIT      = "sec"
    MODE      = "exclusive"
    HIDDEN
    NODOCS
    CALLBACKS = [
        "PREPARE" = {
            pearl::AmRuntime::getInstance().setCbdata(data);
            pearl::AmRuntime::getInstance().setCbmanager(cbmanager);

            pearl::AmRuntime::getInstance().attach(AmLockContention::getInstance());
            pearl::AmRuntime::getInstance().attach(AmSeverityExchange::getInstance());
            pearl::AmRuntime::getInstance().attach(AmSyncpointExchange::getInstance());
            pearl::AmRuntime::getInstance().attach(AmWaitForProgressRequest::getInstance());
            pearl::AmRuntime::getInstance().attach(AmWaitForProgressResponse::getInstance());

            #if defined(_MPI)
                // Register MPI specific factory callbacks
                pearl::AmRequestFactory::registerCallback(Paradigm::MPI,
                                                          &MpiAmRequest::create);
                pearl::AmListenerFactory::registerCallback(Paradigm::MPI,
                                                           &MpiAmListener::create);
            #endif

            #if defined(_ARMCI)
                // Register ARMCI specific factory callbacks
                pearl::AmRequestFactory::registerCallback(Paradigm::ARMCI,
                                                          &MpiAmRequest::create);
                pearl::AmListenerFactory::registerCallback(Paradigm::ARMCI,
                                                           &MpiAmListener::create);
            #endif


        }
        "FINISHED" = {
            AmRuntime::getInstance().shutdown();
        }
    ]
]
