/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 2018-2019                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  This software may be modified and distributed under the terms of       **
**  a BSD-style license.  See the COPYING file in the package base         **
**  directory for details.                                                 **
****************************************************************************/


/**
@if MANPAGE
@page scout Scalasca parallel trace analyzer
@else
@page scout scout &ndash; Scalasca parallel trace analyzer
@endif
@manpage


@section commands_scout_synopsis SYNOPSIS

@b scout.ser
    [@e OPTION]
    (@e ANCHOR_FILE \| @e EXPERIMENT_DIR)
\n
@b scout.omp
    [@e OPTION]
    (@e ANCHOR_FILE \| @e EXPERIMENT_DIR)
\n
@b scout.mpi
    [@e OPTION]
    (@e ANCHOR_FILE \| @e EXPERIMENT_DIR)
\n
@b scout.hyb
    [@e OPTION]
    (@e ANCHOR_FILE \| @e EXPERIMENT_DIR)


@section commands_scout_description DESCRIPTION

@b scout is the scalable automatic trace-analysis component of the Scalasca Trace Tools.
In particular, it provides the ability to

 - identify wait states in communication and synchronization operations that occur, for example, as a result of unevenly distributed workloads,
 - pinpoint the root causes of those wait states (i.e., delays), and
 - identify the activities on the critical path of the target application, highlighting those routines which determine the length of the program execution and therefore constitute the best candidates for optimization.

Usually, @b scout is launched automatically by the Scalasca measurement collection and analysis nexus @ref_man{scan,1} after a successful measurement if event tracing is configured.
However, it can also be run manually on an existing event trace measurement.

@b scout currently supports trace experiments in two different event trace formats: OTF2 traces generated by the Score-P instrumentation and measurement system, and legacy traces in EPILOG format generated by the measurement system of the Scalasca 1.x release series.
For OTF2 event traces, @b scout has to be provided with the corresponding @e ANCHOR_FILE (e.g., '`traces.otf2`'), for EPILOG traces with the experiment directory name @e EXPERIMENT_DIR.

Depending on the build configuration and the capabilities of the target platform, the @b scout analyzer may be available in up to four forms:
<dl>
    <dt>scout.ser</dt>
    <dd>
        is always built.
        It is used to analyze event traces generated by serial applications.
        It can also be used to analyze event traces from multi-threaded applications, however, it will then only provide information about the master thread.
    </dd>

    <dt>scout.omp</dt>
    <dd>
        is built whenever the Scalasca Trace Tools are configured with OpenMP support.
        It is used to analyze event traces generated by pure multi-threaded applications (e.g., using OpenMP or POSIX threads).
        It can also be used to analyze event traces from serial applications, though analysis incurs a higher overhead than using @b scout.ser.
    </dd>

    <dt>scout.mpi</dt>
    <dd>
        is built whenever the Scalasca Trace Tools are configured with MPI support.
        It is used to analyze event traces generated by pure MPI applications.
        It can also be used on traces from multi-threaded MPI applications, however, it will then only provide information about the master thread of each process and its MPI activities.
    </dd>

    <dt>scout.hyb</dt>
    <dd>
        is built if the Scalasca Trace Tools are configured with both MPI and OpenMP support.
        It is used to analyze event traces generated by multi-threaded MPI applications (e.g., MPI+OpenMP or MPI+Pthreads), providing information about all OpenMP/POSIX threads of each MPI process.
        It can also be used on traces from pure MPI applications, though analysis incurs a slightly higher overhead than using @b scout.mpi.
    </dd>
</dl>

Note that @b scout.mpi and @b scout.hyb are implemented as MPI programs, and therefore have to be executed using appropriate MPI launch commands and flags.
Also, the number of MPI processes for @b scout must be identical to the number of MPI processes used for the target application execution.

If successful, @b scout produces the following output files in the measurement archive directory:
 - `scout.cubex`: the trace analysis result
 - `trace.stat`: trace analysis pattern statistics


@section commands_scout_options OPTIONS

@b scout accepts a number of command-line options to enable/disable particular analysis features.
When @b scout is launched automatically from the Scalasca measurement collection and analysis nexus @ref_man{scan,1}, these options can be passed to the analyzer via the @b SCAN_ANALYZE_OPTS environment variable.

@subsection commands_scout_common_options Common options
<dl>
    <dt>\--statistics</dt>
    <dd>
        Enables most-severe instance tracking and wait-state statistics.
        This is the default.
    </dd>

    <dt>\--no-statistics</dt>
    <dd>
        Disables most-severe instance tracking and wait-state statistics.
    </dd>

    <dt>\--critical-path</dt>
    <dd>
        Enables critical-path analysis.
        This is the default.
    </dd>

    <dt>\--no-critical-path</dt>
    <dd>
        Disables critical-path analysis.
    </dd>

    <dt>\--rootcause</dt>
    <dd>
        Enables root-cause analysis.
        This is the default.
    </dd>

    <dt>\--no-rootcause</dt>
    <dd>
        Disables root-cause analysis.
    </dd>

    <dt>\--single-pass</dt>
    <dd>
        Use single-pass forward analysis only.
        Disables both critical-path and root-cause analysis, as well as the detection of <i>Late Receiver</i> wait states.
    </dt>

    <dt>-v, \--verbose</dt>
    <dd>
        Increase verbosity.
    </dd>

    <dt>\--help</dt>
    <dd>
        Print a brief usage summary, then exit.
    </dd>
</dl>

@subsection commands_scout_mpi_options MPI options (scout.mpi/scout.hyb only)
<dl>
    <dt>\--time-correct</dt>
    <dd>
        Enables enhanced timestamp correction.
        Event traces collected on clusters without a synchronized clock may contain logical clock condition violations (such as a receive completing before the corresponding send is initiated).
        When @b scout detects such situations, it issues a warning that the analysis may be inconsistent and recommends (re-)running trace analysis with its integrated timestamp correction algorithm activated.
    </dd>

    <dt>\--no-time-correct</dt>
    <dd>
        Disables enhanced timestamp correction.
        This is the default.
    </dd>
</dl>


@section commands_scout_exitstatus EXIT STATUS

@b scout exits with status 0 if automatic trace analysis was successful, and greater than 0 if errors occur.


@section commands_scout_notes NOTES

@b scout poses a number of requirements on the input event trace data, which are documented in the <em>OPEN_ISSUES</em> file installed as part of the Scalasca Trace Tools documentation.
It is also available online at
@if MANPAGE
<em>https://www.scalasca.org</em>.
@else
@cite scalasca_webdocs.
@endif
If those requirements are not met, @b scout may abort, deadlock, or crash.

If @b scout crashes or deadlocks even though the documented requirements are met (which usually indicates a bug), restricting the scope of the analysis by disabling certain features (e.g., critical-path and/or root-cause analysis) may help as a workaround.
In any case, please report such issues for further investigation
@if MANPAGE
(see @ref commands_scout_bugs below).
@else
@latexonly
    \setboolean{insideManPage}{false}
@endlatexonly
(see Chapter @ref reporting_bugs).
@latexonly
    \setboolean{insideManPage}{true}
@endlatexonly
@endif


@if MANPAGE
@section commands_scout_bugs BUGS

Please report bugs to <em>scalasca@fz-juelich.de</em>.
Make sure to include at least the following information in your bug report:
 - The Scalasca Trace Tools version reported by '`scalasca -V`'.
 - The Scalasca Trace Tools configuration reported by '`scalasca -c`'.
 - The Score-P version reported by '`scorep --version`'.
 - The Score-P configuration reported by '`scorep-info config-summary`'.
 - The exact command line of the failing command.
 - The exact failure/error message.

Also, please archive a copy of the entire experiment archive directory including the event trace data, as this may be required to aid in debugging.
However, <b>ONLY PROVIDE TRACE DATA IF EXPLICITLY REQUESTED</b>, as the data volume may be excessive.
@endif


@section commands_scout_examples EXAMPLES

<b>scout.omp scorep_foo_Ox4_trace/traces.otf2</b>\n
Perform the Scalasca OpenMP event trace analysis on the OTF2 event trace with anchor file <em>scorep_foo_Ox4_trace/traces.otf2</em>.

<b>mpiexec -n 16 scout.mpi \--time-correct scorep_bar_16_trace/traces.otf2</b>\n
Apply the enhanced timestamp correction and perform the Scalasca MPI event trace analysis on the OTF2 event trace with anchor file <em>scorep_bar_16_trace/traces.otf</em>.

<b>mpiexec -n 4 scout.hyb epik_foobar_4x4_trace</b>\n
Perform the hybrid Scalasca MPI+OpenMP event trace analysis on the EPILOG event trace in the experiment archive <em>epik_foobar_4x4_trace</em> generated by the Scalasca 1.x release series.


@section commands_scout_see SEE ALSO

@ref_man{scalasca,1}, @ref_man{scan,1}, @ref_man{square,1}

@if MANPAGE
The full Scalasca Trace Tools documentation is available online at <em>https://www.scalasca.org</em>.
@endif


@navigation_prev{square}
@clearpage
*/
