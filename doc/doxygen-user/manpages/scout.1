.TH "scout" 1 "Mon Apr 19 2021" "Version 2.6" "Scalasca Trace Tools" \" -*- nroff -*-
.nh
.SH NAME
scout \- Scalasca parallel trace analyzer 
.
.SH "SYNOPSIS"
.PP
\fBscout\&.ser\fP [\fIOPTION\fP] (\fIANCHOR_FILE\fP | \fIEXPERIMENT_DIR\fP) 
.br
\fBscout\&.omp\fP [\fIOPTION\fP] (\fIANCHOR_FILE\fP | \fIEXPERIMENT_DIR\fP) 
.br
\fBscout\&.mpi\fP [\fIOPTION\fP] (\fIANCHOR_FILE\fP | \fIEXPERIMENT_DIR\fP) 
.br
\fBscout\&.hyb\fP [\fIOPTION\fP] (\fIANCHOR_FILE\fP | \fIEXPERIMENT_DIR\fP)
.SH "DESCRIPTION"
.PP
\fBscout\fP is the scalable automatic trace-analysis component of the Scalasca Trace Tools\&. In particular, it provides the ability to
.PP
.IP "\(bu" 2
identify wait states in communication and synchronization operations that occur, for example, as a result of unevenly distributed workloads,
.IP "\(bu" 2
pinpoint the root causes of those wait states (i\&.e\&., delays), and
.IP "\(bu" 2
identify the activities on the critical path of the target application, highlighting those routines which determine the length of the program execution and therefore constitute the best candidates for optimization\&.
.PP
.PP
Usually, \fBscout\fP is launched automatically by the Scalasca measurement collection and analysis nexus \fBscan\fP(1) after a successful measurement if event tracing is configured\&. However, it can also be run manually on an existing event trace measurement\&.
.PP
\fBscout\fP currently supports trace experiments in two different event trace formats: OTF2 traces generated by the Score-P instrumentation and measurement system, and legacy traces in EPILOG format generated by the measurement system of the Scalasca 1\&.x release series\&. For OTF2 event traces, \fBscout\fP has to be provided with the corresponding \fIANCHOR_FILE\fP (e\&.g\&., '\fCtraces\&.otf2\fP'), for EPILOG traces with the experiment directory name \fIEXPERIMENT_DIR\fP\&.
.PP
Depending on the build configuration and the capabilities of the target platform, the \fBscout\fP analyzer may be available in up to four forms: 
.IP "\fBscout\&.ser \fP" 1c
is always built\&. It is used to analyze event traces generated by serial applications\&. It can also be used to analyze event traces from multi-threaded applications, however, it will then only provide information about the master thread\&. 
.PP
.IP "\fBscout\&.omp \fP" 1c
is built whenever the Scalasca Trace Tools are configured with OpenMP support\&. It is used to analyze event traces generated by pure multi-threaded applications (e\&.g\&., using OpenMP or POSIX threads)\&. It can also be used to analyze event traces from serial applications, though analysis incurs a higher overhead than using \fBscout\&.ser\fP\&. 
.PP
.IP "\fBscout\&.mpi \fP" 1c
is built whenever the Scalasca Trace Tools are configured with MPI support\&. It is used to analyze event traces generated by pure MPI applications\&. It can also be used on traces from multi-threaded MPI applications, however, it will then only provide information about the master thread of each process and its MPI activities\&. 
.PP
.IP "\fBscout\&.hyb \fP" 1c
is built if the Scalasca Trace Tools are configured with both MPI and OpenMP support\&. It is used to analyze event traces generated by multi-threaded MPI applications (e\&.g\&., MPI+OpenMP or MPI+Pthreads), providing information about all OpenMP/POSIX threads of each MPI process\&. It can also be used on traces from pure MPI applications, though analysis incurs a slightly higher overhead than using \fBscout\&.mpi\fP\&.  
.PP
.PP
Note that \fBscout\&.mpi\fP and \fBscout\&.hyb\fP are implemented as MPI programs, and therefore have to be executed using appropriate MPI launch commands and flags\&. Also, the number of MPI processes for \fBscout\fP must be identical to the number of MPI processes used for the target application execution\&.
.PP
If successful, \fBscout\fP produces the following output files in the measurement archive directory:
.IP "\(bu" 2
\fCscout\&.cubex\fP: the trace analysis result
.IP "\(bu" 2
\fCtrace\&.stat\fP: trace analysis pattern statistics
.PP
.SH "OPTIONS"
.PP
\fBscout\fP accepts a number of command-line options to enable/disable particular analysis features\&. When \fBscout\fP is launched automatically from the Scalasca measurement collection and analysis nexus \fBscan\fP(1), these options can be passed to the analyzer via the \fBSCAN_ANALYZE_OPTS\fP environment variable\&.
.SS "Common options"
.IP "\fB--statistics \fP" 1c
Enables most-severe instance tracking and wait-state statistics\&. This is the default\&. 
.PP
.IP "\fB--no-statistics \fP" 1c
Disables most-severe instance tracking and wait-state statistics\&. 
.PP
.IP "\fB--critical-path \fP" 1c
Enables critical-path analysis\&. This is the default\&. 
.PP
.IP "\fB--no-critical-path \fP" 1c
Disables critical-path analysis\&. 
.PP
.IP "\fB--rootcause \fP" 1c
Enables root-cause analysis\&. This is the default\&. 
.PP
.IP "\fB--no-rootcause \fP" 1c
Disables root-cause analysis\&. 
.PP
.IP "\fB--single-pass \fP" 1c
Use single-pass forward analysis only\&. Disables both critical-path and root-cause analysis, as well as the detection of \fILate Receiver\fP wait states\&. 
.PP
.IP "\fB-v, --verbose \fP" 1c
Increase verbosity\&. 
.PP
.IP "\fB--help \fP" 1c
Print a brief usage summary, then exit\&.  
.PP
.SS "MPI options (scout\&.mpi/scout\&.hyb only)"
.IP "\fB--time-correct \fP" 1c
Enables enhanced timestamp correction\&. Event traces collected on clusters without a synchronized clock may contain logical clock condition violations (such as a receive completing before the corresponding send is initiated)\&. When \fBscout\fP detects such situations, it issues a warning that the analysis may be inconsistent and recommends (re-)running trace analysis with its integrated timestamp correction algorithm activated\&. 
.PP
.IP "\fB--no-time-correct \fP" 1c
Disables enhanced timestamp correction\&. This is the default\&.  
.PP
.SH "EXIT STATUS"
.PP
\fBscout\fP exits with status 0 if automatic trace analysis was successful, and greater than 0 if errors occur\&.
.SH "NOTES"
.PP
\fBscout\fP poses a number of requirements on the input event trace data, which are documented in the \fIOPEN_ISSUES\fP file installed as part of the Scalasca Trace Tools documentation\&. It is also available online at \fIhttps://www.scalasca.org\fP\&. If those requirements are not met, \fBscout\fP may abort, deadlock, or crash\&.
.PP
If \fBscout\fP crashes or deadlocks even though the documented requirements are met (which usually indicates a bug), restricting the scope of the analysis by disabling certain features (e\&.g\&., critical-path and/or root-cause analysis) may help as a workaround\&. In any case, please report such issues for further investigation (see \fBBUGS\fP below)\&.
.SH "BUGS"
.PP
Please report bugs to \fIscalasca@fz-juelich.de\fP\&. Make sure to include at least the following information in your bug report:
.IP "\(bu" 2
The Scalasca Trace Tools version reported by '\fCscalasca -V\fP'\&.
.IP "\(bu" 2
The Scalasca Trace Tools configuration reported by '\fCscalasca -c\fP'\&.
.IP "\(bu" 2
The Score-P version reported by '\fCscorep --version\fP'\&.
.IP "\(bu" 2
The Score-P configuration reported by '\fCscorep-info config-summary\fP'\&.
.IP "\(bu" 2
The exact command line of the failing command\&.
.IP "\(bu" 2
The exact failure/error message\&.
.PP
.PP
Also, please archive a copy of the entire experiment archive directory including the event trace data, as this may be required to aid in debugging\&. However, \fBONLY PROVIDE TRACE DATA IF EXPLICITLY REQUESTED\fP, as the data volume may be excessive\&.
.SH "EXAMPLES"
.PP
\fBscout\&.omp scorep_foo_Ox4_trace/traces\&.otf2\fP
.br
Perform the Scalasca OpenMP event trace analysis on the OTF2 event trace with anchor file \fIscorep_foo_Ox4_trace/traces\&.otf2\fP\&.
.PP
\fBmpiexec -n 16 scout\&.mpi --time-correct scorep_bar_16_trace/traces\&.otf2\fP
.br
Apply the enhanced timestamp correction and perform the Scalasca MPI event trace analysis on the OTF2 event trace with anchor file \fIscorep_bar_16_trace/traces\&.otf\fP\&.
.PP
\fBmpiexec -n 4 scout\&.hyb epik_foobar_4x4_trace\fP
.br
Perform the hybrid Scalasca MPI+OpenMP event trace analysis on the EPILOG event trace in the experiment archive \fIepik_foobar_4x4_trace\fP generated by the Scalasca 1\&.x release series\&.
.SH "SEE ALSO"
.PP
\fBscalasca\fP(1), \fBscan\fP(1), \fBsquare\fP(1)
.PP
The full Scalasca Trace Tools documentation is available online at \fIhttps://www.scalasca.org\fP\&.
.PP
.
